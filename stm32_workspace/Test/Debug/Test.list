
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005314  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800556c  0800556c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005574  08005574  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800557c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004344  20000064  080055e0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043a8  080055e0  000243a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_line   00019dd8  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000069  00000000  00000000  00039eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00016892  00000000  00000000  00039f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003749  00000000  00000000  000507aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000014e0  00000000  00000000  00053ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dad38  00000000  00000000  000553d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000100d  00000000  00000000  00130110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000037c6  00000000  00000000  0013111d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a78  00000000  00000000  001348e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080054cc 	.word	0x080054cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	080054cc 	.word	0x080054cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80005b0:	f000 fab8 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	; (80005ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	; (80005f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80005da:	f004 fb01 	bl	8004be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005de:	f000 f80e 	bl	80005fe <main>
  bx  lr    
 80005e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005f0:	0800557c 	.word	0x0800557c
  ldr r2, =_sbss
 80005f4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005f8:	200043a8 	.word	0x200043a8

080005fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC_IRQHandler>

080005fe <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000602:	f000 fb09 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f809 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f89f 	bl	800074c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060e:	f000 f873 	bl	80006f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  tasks_setup();
 8000612:	f000 faa7 	bl	8000b64 <tasks_setup>
 8000616:	2300      	movs	r3, #0

  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
}
 8000618:	4618      	mov	r0, r3
 800061a:	bd80      	pop	{r7, pc}

0800061c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2234      	movs	r2, #52	; 0x34
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 faca 	bl	8004bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <SystemClock_Config+0xd4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <SystemClock_Config+0xd4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <SystemClock_Config+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <SystemClock_Config+0xd8>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <SystemClock_Config+0xd8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000690:	2310      	movs	r3, #16
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000694:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000698:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069a:	2304      	movs	r3, #4
 800069c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f902 	bl	80018b4 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x9e>
    Error_Handler();
 80006b6:	f000 f8c9 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80006ba:	230f      	movs	r3, #15
 80006bc:	60bb      	str	r3, [r7, #8]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fd70 	bl	80011bc <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xca>
    Error_Handler();
 80006e2:	f000 f8b3 	bl	800084c <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_USART2_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART2_UART_Init+0x4c>)
 8000730:	f001 fe00 	bl	8002334 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x46>
    Error_Handler();
 800073a:	f000 f887 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000080 	.word	0x20000080
 8000748:	40004400 	.word	0x40004400

0800074c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a2c      	ldr	r2, [pc, #176]	; (800081c <MX_GPIO_Init+0xd0>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b2a      	ldr	r3, [pc, #168]	; (800081c <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a25      	ldr	r2, [pc, #148]	; (800081c <MX_GPIO_Init+0xd0>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b23      	ldr	r3, [pc, #140]	; (800081c <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <MX_GPIO_Init+0xd0>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2120      	movs	r1, #32
 80007d6:	4812      	ldr	r0, [pc, #72]	; (8000820 <MX_GPIO_Init+0xd4>)
 80007d8:	f000 fcd6 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	480c      	ldr	r0, [pc, #48]	; (8000824 <MX_GPIO_Init+0xd8>)
 80007f4:	f000 fb34 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f8:	2320      	movs	r3, #32
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_GPIO_Init+0xd4>)
 8000810:	f000 fb26 	bl	8000e60 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40020000 	.word	0x40020000
 8000824:	40020800 	.word	0x40020800

08000828 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d101      	bne.n	800083e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800083a:	f000 fa0f 	bl	8000c5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40010000 	.word	0x40010000

0800084c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>

08000856 <pinin_pv>:
#include "pinin.h"

uint16_t pinin_pv(void) { return 1; }
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
 800085a:	2301      	movs	r3, #1
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <pinout_builtin_led>:
#include "pinout.h"
#include <stddef.h>


void pinout_builtin_led(uint8_t led_state) {
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]

}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <pinout_serial_port>:

void pinout_fan1(uint8_t PWM) {}

void pinout_serial_port(const char *pMessage) {
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  for (size_t ii = 0; pMessage[ii] != '\0'; ii++) {
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	e002      	b.n	8000890 <pinout_serial_port+0x14>
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3301      	adds	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	4413      	add	r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1f6      	bne.n	800088a <pinout_serial_port+0xe>

  }
  // Wrapping the String Something with the F() wrapper will move the Strings to
  // Flash memory only rather than to use SRAM space. E.g. Serial.print(F("Sto
  // cazzo"))
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_MspInit+0x54>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	4a11      	ldr	r2, [pc, #68]	; (8000900 <HAL_MspInit+0x54>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c0:	6453      	str	r3, [r2, #68]	; 0x44
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <HAL_MspInit+0x54>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <HAL_MspInit+0x54>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <HAL_MspInit+0x54>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_MspInit+0x54>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	210f      	movs	r1, #15
 80008ee:	f06f 0001 	mvn.w	r0, #1
 80008f2:	f000 fa8b 	bl	8000e0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a19      	ldr	r2, [pc, #100]	; (8000988 <HAL_UART_MspInit+0x84>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d12b      	bne.n	800097e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_UART_MspInit+0x88>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a17      	ldr	r2, [pc, #92]	; (800098c <HAL_UART_MspInit+0x88>)
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_UART_MspInit+0x88>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_UART_MspInit+0x88>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <HAL_UART_MspInit+0x88>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_UART_MspInit+0x88>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800095e:	230c      	movs	r3, #12
 8000960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096e:	2307      	movs	r3, #7
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <HAL_UART_MspInit+0x8c>)
 800097a:	f000 fa71 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	; 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40004400 	.word	0x40004400
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000

08000994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	; 0x30
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <HAL_InitTick+0xd0>)
 80009aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ac:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <HAL_InitTick+0xd0>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6453      	str	r3, [r2, #68]	; 0x44
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <HAL_InitTick+0xd0>)
 80009b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c0:	f107 020c 	add.w	r2, r7, #12
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fd10 	bl	80013f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009d0:	f000 fcfa 	bl	80013c8 <HAL_RCC_GetPCLK2Freq>
 80009d4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <HAL_InitTick+0xd4>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	0c9b      	lsrs	r3, r3, #18
 80009e0:	3b01      	subs	r3, #1
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009e4:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <HAL_InitTick+0xd8>)
 80009e6:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <HAL_InitTick+0xdc>)
 80009e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <HAL_InitTick+0xd8>)
 80009ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009f2:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <HAL_InitTick+0xd8>)
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <HAL_InitTick+0xd8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_InitTick+0xd8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <HAL_InitTick+0xd8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a0a:	4818      	ldr	r0, [pc, #96]	; (8000a6c <HAL_InitTick+0xd8>)
 8000a0c:	f001 f9f0 	bl	8001df0 <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d11b      	bne.n	8000a56 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a1e:	4813      	ldr	r0, [pc, #76]	; (8000a6c <HAL_InitTick+0xd8>)
 8000a20:	f001 fa40 	bl	8001ea4 <HAL_TIM_Base_Start_IT>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d111      	bne.n	8000a56 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a32:	2019      	movs	r0, #25
 8000a34:	f000 fa06 	bl	8000e44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	d808      	bhi.n	8000a50 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	6879      	ldr	r1, [r7, #4]
 8000a42:	2019      	movs	r0, #25
 8000a44:	f000 f9e2 	bl	8000e0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_InitTick+0xe0>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e002      	b.n	8000a56 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3730      	adds	r7, #48	; 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	431bde83 	.word	0x431bde83
 8000a6c:	200000c8 	.word	0x200000c8
 8000a70:	40010000 	.word	0x40010000
 8000a74:	20000004 	.word	0x20000004

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000aaa:	f001 fa6b 	bl	8001f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000c8 	.word	0x200000c8

08000ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <_sbrk+0x5c>)
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <_sbrk+0x60>)
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_sbrk+0x64>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <_sbrk+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d207      	bcs.n	8000af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae8:	f004 f874 	bl	8004bd4 <__errno>
 8000aec:	4603      	mov	r3, r0
 8000aee:	220c      	movs	r2, #12
 8000af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000af6:	e009      	b.n	8000b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <_sbrk+0x64>)
 8000b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20020000 	.word	0x20020000
 8000b18:	00000400 	.word	0x00000400
 8000b1c:	20000110 	.word	0x20000110
 8000b20:	200043a8 	.word	0x200043a8

08000b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <components_init>:
// Task function prototypes
static void components_init(void);
static void task_200ms(void * /*pVParameters*/);
static void task_1000ms(void * /*pVParameters*/);

static void components_init() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  // List all the components used. Initializes queues, mutex, etc.
  blink_init(); // Initialize initial condition of the component, mutex,
 8000b4c:	f003 fd90 	bl	8004670 <blink_init>
  debug_init(); // Initialize initial condition of the component, mutex,
 8000b50:	f003 fe3c 	bl	80047cc <debug_init>
  serial_port_init();
 8000b54:	f003 fefc 	bl	8004950 <serial_port_init>
  pv_init();
 8000b58:	f003 feba 	bl	80048d0 <pv_init>
  tempsens_init();
 8000b5c:	f003 ffc8 	bl	8004af0 <tempsens_init>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <tasks_setup>:

void tasks_setup() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af02      	add	r7, sp, #8
  // Initialize all the included components.
  components_init();
 8000b6a:	f7ff ffed 	bl	8000b48 <components_init>

  // From now on it is all the same. Copied and pasted.
  // Create task
  BaseType_t xReturned1000ms;
  xReturned1000ms = xTaskCreate(task_1000ms, NAME_1000MS, STACK_SIZE_1000MS,
 8000b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	2302      	movs	r3, #2
 8000b76:	4619      	mov	r1, r3
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <tasks_setup+0x4c>)
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	9100      	str	r1, [sp, #0]
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <tasks_setup+0x50>)
 8000b80:	490d      	ldr	r1, [pc, #52]	; (8000bb8 <tasks_setup+0x54>)
 8000b82:	480e      	ldr	r0, [pc, #56]	; (8000bbc <tasks_setup+0x58>)
 8000b84:	f002 fe76 	bl	8003874 <xTaskCreate>
 8000b88:	6078      	str	r0, [r7, #4]
  /*   serial_port_send(msg); */
  /* } */

  // Create task
  BaseType_t xReturned200ms;
  xReturned200ms = xTaskCreate(task_200ms, NAME_200MS, STACK_SIZE_200MS,
 8000b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	2302      	movs	r3, #2
 8000b92:	4619      	mov	r1, r3
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <tasks_setup+0x5c>)
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	9100      	str	r1, [sp, #0]
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <tasks_setup+0x60>)
 8000b9c:	490a      	ldr	r1, [pc, #40]	; (8000bc8 <tasks_setup+0x64>)
 8000b9e:	480b      	ldr	r0, [pc, #44]	; (8000bcc <tasks_setup+0x68>)
 8000ba0:	f002 fe68 	bl	8003874 <xTaskCreate>
 8000ba4:	6038      	str	r0, [r7, #0]
  /*   // To do: change! */
  /*   const char msg[] = "I cannot instantiate the 200ms task."; */
  /*   // TODO */
  /*   /1* serial_port_send(msg); *1/ */
  /* } */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000114 	.word	0x20000114
 8000bb4:	08005524 	.word	0x08005524
 8000bb8:	08005518 	.word	0x08005518
 8000bbc:	08000bd1 	.word	0x08000bd1
 8000bc0:	20000118 	.word	0x20000118
 8000bc4:	08005534 	.word	0x08005534
 8000bc8:	08005528 	.word	0x08005528
 8000bcc:	08000bf7 	.word	0x08000bf7

08000bd0 <task_1000ms>:

static void task_1000ms(void *pVParameters) // This is a task.
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  const struct TaskParams *params = (struct TaskParams *)pVParameters;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	60fb      	str	r3, [r7, #12]

  while (1) {
    // Run activities
    blink_main();
 8000bdc:	f003 fd5a 	bl	8004694 <blink_main>
    debug_main();
 8000be0:	f003 fe12 	bl	8004808 <debug_main>
    tempsens_main();
 8000be4:	f003 ff96 	bl	8004b14 <tempsens_main>

    // Task Schedule
    const TickType_t X_DELAY = params->PERIOD / portTICK_PERIOD_MS;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60bb      	str	r3, [r7, #8]
    vTaskDelay(X_DELAY); // one tick delay (15ms)
 8000bee:	68b8      	ldr	r0, [r7, #8]
 8000bf0:	f002 ff84 	bl	8003afc <vTaskDelay>
  while (1) {
 8000bf4:	e7f2      	b.n	8000bdc <task_1000ms+0xc>

08000bf6 <task_200ms>:
  }
}

static void task_200ms(void *pVParameters) // This is a task.
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b084      	sub	sp, #16
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  const struct TaskParams *params = (struct TaskParams *)pVParameters;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

  while (1) {
    serial_port_main();
 8000c02:	f003 fead 	bl	8004960 <serial_port_main>
    pv_main();
 8000c06:	f003 fe75 	bl	80048f4 <pv_main>

    // Task Schedule
    const TickType_t X_DELAY = params->PERIOD / portTICK_PERIOD_MS;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	60bb      	str	r3, [r7, #8]
    vTaskDelay(X_DELAY); // one tick delay (15ms)
 8000c10:	68b8      	ldr	r0, [r7, #8]
 8000c12:	f002 ff73 	bl	8003afc <vTaskDelay>
  while (1) {
 8000c16:	e7f4      	b.n	8000c02 <task_200ms+0xc>

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <HAL_Init+0x40>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_Init+0x40>)
 8000c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_Init+0x40>)
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f8d8 	bl	8000df6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	200f      	movs	r0, #15
 8000c48:	f7ff fea4 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fe2e 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023c00 	.word	0x40023c00

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	2000011c 	.word	0x2000011c

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	2000011c 	.word	0x2000011c

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	; (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ff4c 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1e:	f7ff ff61 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	6978      	ldr	r0, [r7, #20]
 8000e2a:	f7ff ffb1 	bl	8000d90 <NVIC_EncodePriority>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff80 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff54 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	e165      	b.n	8001148 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	f040 8154 	bne.w	8001142 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d005      	beq.n	8000eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d130      	bne.n	8000f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 0201 	and.w	r2, r3, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d017      	beq.n	8000f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d123      	bne.n	8000fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	69b9      	ldr	r1, [r7, #24]
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0203 	and.w	r2, r3, #3
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80ae 	beq.w	8001142 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b5d      	ldr	r3, [pc, #372]	; (8001160 <HAL_GPIO_Init+0x300>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a5c      	ldr	r2, [pc, #368]	; (8001160 <HAL_GPIO_Init+0x300>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b5a      	ldr	r3, [pc, #360]	; (8001160 <HAL_GPIO_Init+0x300>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001002:	4a58      	ldr	r2, [pc, #352]	; (8001164 <HAL_GPIO_Init+0x304>)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4f      	ldr	r2, [pc, #316]	; (8001168 <HAL_GPIO_Init+0x308>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d025      	beq.n	800107a <HAL_GPIO_Init+0x21a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4e      	ldr	r2, [pc, #312]	; (800116c <HAL_GPIO_Init+0x30c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d01f      	beq.n	8001076 <HAL_GPIO_Init+0x216>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4d      	ldr	r2, [pc, #308]	; (8001170 <HAL_GPIO_Init+0x310>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d019      	beq.n	8001072 <HAL_GPIO_Init+0x212>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4c      	ldr	r2, [pc, #304]	; (8001174 <HAL_GPIO_Init+0x314>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0x20e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4b      	ldr	r2, [pc, #300]	; (8001178 <HAL_GPIO_Init+0x318>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d00d      	beq.n	800106a <HAL_GPIO_Init+0x20a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4a      	ldr	r2, [pc, #296]	; (800117c <HAL_GPIO_Init+0x31c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x206>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a49      	ldr	r2, [pc, #292]	; (8001180 <HAL_GPIO_Init+0x320>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_GPIO_Init+0x202>
 800105e:	2306      	movs	r3, #6
 8001060:	e00c      	b.n	800107c <HAL_GPIO_Init+0x21c>
 8001062:	2307      	movs	r3, #7
 8001064:	e00a      	b.n	800107c <HAL_GPIO_Init+0x21c>
 8001066:	2305      	movs	r3, #5
 8001068:	e008      	b.n	800107c <HAL_GPIO_Init+0x21c>
 800106a:	2304      	movs	r3, #4
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x21c>
 800106e:	2303      	movs	r3, #3
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x21c>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x21c>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x21c>
 800107a:	2300      	movs	r3, #0
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4093      	lsls	r3, r2
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108c:	4935      	ldr	r1, [pc, #212]	; (8001164 <HAL_GPIO_Init+0x304>)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109a:	4b3a      	ldr	r3, [pc, #232]	; (8001184 <HAL_GPIO_Init+0x324>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010be:	4a31      	ldr	r2, [pc, #196]	; (8001184 <HAL_GPIO_Init+0x324>)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c4:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <HAL_GPIO_Init+0x324>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e8:	4a26      	ldr	r2, [pc, #152]	; (8001184 <HAL_GPIO_Init+0x324>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ee:	4b25      	ldr	r3, [pc, #148]	; (8001184 <HAL_GPIO_Init+0x324>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001112:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <HAL_GPIO_Init+0x324>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_GPIO_Init+0x324>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800113c:	4a11      	ldr	r2, [pc, #68]	; (8001184 <HAL_GPIO_Init+0x324>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3301      	adds	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	2b0f      	cmp	r3, #15
 800114c:	f67f ae96 	bls.w	8000e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40013800 	.word	0x40013800
 8001168:	40020000 	.word	0x40020000
 800116c:	40020400 	.word	0x40020400
 8001170:	40020800 	.word	0x40020800
 8001174:	40020c00 	.word	0x40020c00
 8001178:	40021000 	.word	0x40021000
 800117c:	40021400 	.word	0x40021400
 8001180:	40021800 	.word	0x40021800
 8001184:	40013c00 	.word	0x40013c00

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011a4:	e003      	b.n	80011ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	041a      	lsls	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	619a      	str	r2, [r3, #24]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e0cc      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011d0:	4b68      	ldr	r3, [pc, #416]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d90c      	bls.n	80011f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011de:	4b65      	ldr	r3, [pc, #404]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e6:	4b63      	ldr	r3, [pc, #396]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d001      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e0b8      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d020      	beq.n	8001246 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001210:	4b59      	ldr	r3, [pc, #356]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a58      	ldr	r2, [pc, #352]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800121a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001228:	4b53      	ldr	r3, [pc, #332]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a52      	ldr	r2, [pc, #328]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001232:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001234:	4b50      	ldr	r3, [pc, #320]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	494d      	ldr	r1, [pc, #308]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	4313      	orrs	r3, r2
 8001244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d044      	beq.n	80012dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d107      	bne.n	800126a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d119      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e07f      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d003      	beq.n	800127a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001276:	2b03      	cmp	r3, #3
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e06f      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e067      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129a:	4b37      	ldr	r3, [pc, #220]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f023 0203 	bic.w	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4934      	ldr	r1, [pc, #208]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012ac:	f7ff fcea 	bl	8000c84 <HAL_GetTick>
 80012b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b2:	e00a      	b.n	80012ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b4:	f7ff fce6 	bl	8000c84 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e04f      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 020c 	and.w	r2, r3, #12
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	429a      	cmp	r2, r3
 80012da:	d1eb      	bne.n	80012b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d20c      	bcs.n	8001304 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ea:	4b22      	ldr	r3, [pc, #136]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_RCC_ClockConfig+0x1b8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e032      	b.n	800136a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4916      	ldr	r1, [pc, #88]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	4313      	orrs	r3, r2
 8001320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d009      	beq.n	8001342 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	490e      	ldr	r1, [pc, #56]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	4313      	orrs	r3, r2
 8001340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001342:	f000 f887 	bl	8001454 <HAL_RCC_GetSysClockFreq>
 8001346:	4602      	mov	r2, r0
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	490a      	ldr	r1, [pc, #40]	; (800137c <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	5ccb      	ldrb	r3, [r1, r3]
 8001356:	fa22 f303 	lsr.w	r3, r2, r3
 800135a:	4a09      	ldr	r2, [pc, #36]	; (8001380 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_RCC_ClockConfig+0x1c8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fb16 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023c00 	.word	0x40023c00
 8001378:	40023800 	.word	0x40023800
 800137c:	08005500 	.word	0x08005500
 8001380:	20000000 	.word	0x20000000
 8001384:	20000004 	.word	0x20000004

08001388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_RCC_GetHCLKFreq+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000000 	.word	0x20000000

080013a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013a4:	f7ff fff0 	bl	8001388 <HAL_RCC_GetHCLKFreq>
 80013a8:	4602      	mov	r2, r0
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	0a9b      	lsrs	r3, r3, #10
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	4903      	ldr	r1, [pc, #12]	; (80013c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013b6:	5ccb      	ldrb	r3, [r1, r3]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	08005510 	.word	0x08005510

080013c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013cc:	f7ff ffdc 	bl	8001388 <HAL_RCC_GetHCLKFreq>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	0b5b      	lsrs	r3, r3, #13
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	4903      	ldr	r1, [pc, #12]	; (80013ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80013de:	5ccb      	ldrb	r3, [r1, r3]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	08005510 	.word	0x08005510

080013f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	220f      	movs	r2, #15
 80013fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_RCC_GetClockConfig+0x5c>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 0203 	and.w	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_RCC_GetClockConfig+0x5c>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_RCC_GetClockConfig+0x5c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_GetClockConfig+0x5c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <HAL_RCC_GetClockConfig+0x60>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 020f 	and.w	r2, r3, #15
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	601a      	str	r2, [r3, #0]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001458:	b0ae      	sub	sp, #184	; 0xb8
 800145a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800147a:	4bcb      	ldr	r3, [pc, #812]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b0c      	cmp	r3, #12
 8001484:	f200 8206 	bhi.w	8001894 <HAL_RCC_GetSysClockFreq+0x440>
 8001488:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <HAL_RCC_GetSysClockFreq+0x3c>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	080014c5 	.word	0x080014c5
 8001494:	08001895 	.word	0x08001895
 8001498:	08001895 	.word	0x08001895
 800149c:	08001895 	.word	0x08001895
 80014a0:	080014cd 	.word	0x080014cd
 80014a4:	08001895 	.word	0x08001895
 80014a8:	08001895 	.word	0x08001895
 80014ac:	08001895 	.word	0x08001895
 80014b0:	080014d5 	.word	0x080014d5
 80014b4:	08001895 	.word	0x08001895
 80014b8:	08001895 	.word	0x08001895
 80014bc:	08001895 	.word	0x08001895
 80014c0:	080016c5 	.word	0x080016c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014c4:	4bb9      	ldr	r3, [pc, #740]	; (80017ac <HAL_RCC_GetSysClockFreq+0x358>)
 80014c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80014ca:	e1e7      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014cc:	4bb8      	ldr	r3, [pc, #736]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014d2:	e1e3      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d4:	4bb4      	ldr	r3, [pc, #720]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e0:	4bb1      	ldr	r3, [pc, #708]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d071      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ec:	4bae      	ldr	r3, [pc, #696]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	099b      	lsrs	r3, r3, #6
 80014f2:	2200      	movs	r2, #0
 80014f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800150e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001512:	4622      	mov	r2, r4
 8001514:	462b      	mov	r3, r5
 8001516:	f04f 0000 	mov.w	r0, #0
 800151a:	f04f 0100 	mov.w	r1, #0
 800151e:	0159      	lsls	r1, r3, #5
 8001520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001524:	0150      	lsls	r0, r2, #5
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4621      	mov	r1, r4
 800152c:	1a51      	subs	r1, r2, r1
 800152e:	6439      	str	r1, [r7, #64]	; 0x40
 8001530:	4629      	mov	r1, r5
 8001532:	eb63 0301 	sbc.w	r3, r3, r1
 8001536:	647b      	str	r3, [r7, #68]	; 0x44
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001544:	4649      	mov	r1, r9
 8001546:	018b      	lsls	r3, r1, #6
 8001548:	4641      	mov	r1, r8
 800154a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800154e:	4641      	mov	r1, r8
 8001550:	018a      	lsls	r2, r1, #6
 8001552:	4641      	mov	r1, r8
 8001554:	1a51      	subs	r1, r2, r1
 8001556:	63b9      	str	r1, [r7, #56]	; 0x38
 8001558:	4649      	mov	r1, r9
 800155a:	eb63 0301 	sbc.w	r3, r3, r1
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800156c:	4649      	mov	r1, r9
 800156e:	00cb      	lsls	r3, r1, #3
 8001570:	4641      	mov	r1, r8
 8001572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001576:	4641      	mov	r1, r8
 8001578:	00ca      	lsls	r2, r1, #3
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	4603      	mov	r3, r0
 8001580:	4622      	mov	r2, r4
 8001582:	189b      	adds	r3, r3, r2
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
 8001586:	462b      	mov	r3, r5
 8001588:	460a      	mov	r2, r1
 800158a:	eb42 0303 	adc.w	r3, r2, r3
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800159c:	4629      	mov	r1, r5
 800159e:	024b      	lsls	r3, r1, #9
 80015a0:	4621      	mov	r1, r4
 80015a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015a6:	4621      	mov	r1, r4
 80015a8:	024a      	lsls	r2, r1, #9
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015c0:	f7fe fe76 	bl	80002b0 <__aeabi_uldivmod>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4613      	mov	r3, r2
 80015ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015ce:	e067      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d0:	4b75      	ldr	r3, [pc, #468]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	2200      	movs	r2, #0
 80015d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015dc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80015ea:	2300      	movs	r3, #0
 80015ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015f2:	4622      	mov	r2, r4
 80015f4:	462b      	mov	r3, r5
 80015f6:	f04f 0000 	mov.w	r0, #0
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	0159      	lsls	r1, r3, #5
 8001600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001604:	0150      	lsls	r0, r2, #5
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4621      	mov	r1, r4
 800160c:	1a51      	subs	r1, r2, r1
 800160e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001610:	4629      	mov	r1, r5
 8001612:	eb63 0301 	sbc.w	r3, r3, r1
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001624:	4649      	mov	r1, r9
 8001626:	018b      	lsls	r3, r1, #6
 8001628:	4641      	mov	r1, r8
 800162a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800162e:	4641      	mov	r1, r8
 8001630:	018a      	lsls	r2, r1, #6
 8001632:	4641      	mov	r1, r8
 8001634:	ebb2 0a01 	subs.w	sl, r2, r1
 8001638:	4649      	mov	r1, r9
 800163a:	eb63 0b01 	sbc.w	fp, r3, r1
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800164a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800164e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001652:	4692      	mov	sl, r2
 8001654:	469b      	mov	fp, r3
 8001656:	4623      	mov	r3, r4
 8001658:	eb1a 0303 	adds.w	r3, sl, r3
 800165c:	623b      	str	r3, [r7, #32]
 800165e:	462b      	mov	r3, r5
 8001660:	eb4b 0303 	adc.w	r3, fp, r3
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001672:	4629      	mov	r1, r5
 8001674:	028b      	lsls	r3, r1, #10
 8001676:	4621      	mov	r1, r4
 8001678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800167c:	4621      	mov	r1, r4
 800167e:	028a      	lsls	r2, r1, #10
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001688:	2200      	movs	r2, #0
 800168a:	673b      	str	r3, [r7, #112]	; 0x70
 800168c:	677a      	str	r2, [r7, #116]	; 0x74
 800168e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001692:	f7fe fe0d 	bl	80002b0 <__aeabi_uldivmod>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4613      	mov	r3, r2
 800169c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016a0:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	0c1b      	lsrs	r3, r3, #16
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	3301      	adds	r3, #1
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80016b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016c2:	e0eb      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c4:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016d0:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d06b      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016dc:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	2200      	movs	r2, #0
 80016e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80016e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ee:	663b      	str	r3, [r7, #96]	; 0x60
 80016f0:	2300      	movs	r3, #0
 80016f2:	667b      	str	r3, [r7, #100]	; 0x64
 80016f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016f8:	4622      	mov	r2, r4
 80016fa:	462b      	mov	r3, r5
 80016fc:	f04f 0000 	mov.w	r0, #0
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	0159      	lsls	r1, r3, #5
 8001706:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800170a:	0150      	lsls	r0, r2, #5
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4621      	mov	r1, r4
 8001712:	1a51      	subs	r1, r2, r1
 8001714:	61b9      	str	r1, [r7, #24]
 8001716:	4629      	mov	r1, r5
 8001718:	eb63 0301 	sbc.w	r3, r3, r1
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800172a:	4659      	mov	r1, fp
 800172c:	018b      	lsls	r3, r1, #6
 800172e:	4651      	mov	r1, sl
 8001730:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001734:	4651      	mov	r1, sl
 8001736:	018a      	lsls	r2, r1, #6
 8001738:	4651      	mov	r1, sl
 800173a:	ebb2 0801 	subs.w	r8, r2, r1
 800173e:	4659      	mov	r1, fp
 8001740:	eb63 0901 	sbc.w	r9, r3, r1
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001750:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001754:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001758:	4690      	mov	r8, r2
 800175a:	4699      	mov	r9, r3
 800175c:	4623      	mov	r3, r4
 800175e:	eb18 0303 	adds.w	r3, r8, r3
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	462b      	mov	r3, r5
 8001766:	eb49 0303 	adc.w	r3, r9, r3
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001778:	4629      	mov	r1, r5
 800177a:	024b      	lsls	r3, r1, #9
 800177c:	4621      	mov	r1, r4
 800177e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001782:	4621      	mov	r1, r4
 8001784:	024a      	lsls	r2, r1, #9
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800178e:	2200      	movs	r2, #0
 8001790:	65bb      	str	r3, [r7, #88]	; 0x58
 8001792:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001794:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001798:	f7fe fd8a 	bl	80002b0 <__aeabi_uldivmod>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4613      	mov	r3, r2
 80017a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017a6:	e065      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0x420>
 80017a8:	40023800 	.word	0x40023800
 80017ac:	00f42400 	.word	0x00f42400
 80017b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b4:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <HAL_RCC_GetSysClockFreq+0x458>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	2200      	movs	r2, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	4611      	mov	r1, r2
 80017c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017c4:	653b      	str	r3, [r7, #80]	; 0x50
 80017c6:	2300      	movs	r3, #0
 80017c8:	657b      	str	r3, [r7, #84]	; 0x54
 80017ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017ce:	4642      	mov	r2, r8
 80017d0:	464b      	mov	r3, r9
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	0159      	lsls	r1, r3, #5
 80017dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e0:	0150      	lsls	r0, r2, #5
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4641      	mov	r1, r8
 80017e8:	1a51      	subs	r1, r2, r1
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	4649      	mov	r1, r9
 80017ee:	eb63 0301 	sbc.w	r3, r3, r1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001800:	4659      	mov	r1, fp
 8001802:	018b      	lsls	r3, r1, #6
 8001804:	4651      	mov	r1, sl
 8001806:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180a:	4651      	mov	r1, sl
 800180c:	018a      	lsls	r2, r1, #6
 800180e:	4651      	mov	r1, sl
 8001810:	1a54      	subs	r4, r2, r1
 8001812:	4659      	mov	r1, fp
 8001814:	eb63 0501 	sbc.w	r5, r3, r1
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	00eb      	lsls	r3, r5, #3
 8001822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001826:	00e2      	lsls	r2, r4, #3
 8001828:	4614      	mov	r4, r2
 800182a:	461d      	mov	r5, r3
 800182c:	4643      	mov	r3, r8
 800182e:	18e3      	adds	r3, r4, r3
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	464b      	mov	r3, r9
 8001834:	eb45 0303 	adc.w	r3, r5, r3
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001846:	4629      	mov	r1, r5
 8001848:	028b      	lsls	r3, r1, #10
 800184a:	4621      	mov	r1, r4
 800184c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001850:	4621      	mov	r1, r4
 8001852:	028a      	lsls	r2, r1, #10
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800185c:	2200      	movs	r2, #0
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001860:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001862:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001866:	f7fe fd23 	bl	80002b0 <__aeabi_uldivmod>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4613      	mov	r3, r2
 8001870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_RCC_GetSysClockFreq+0x458>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	0f1b      	lsrs	r3, r3, #28
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001882:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001886:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001892:	e003      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800189a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	37b8      	adds	r7, #184	; 0xb8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	00f42400 	.word	0x00f42400

080018b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e28d      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8083 	beq.w	80019da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018d4:	4b94      	ldr	r3, [pc, #592]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d019      	beq.n	8001914 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018e0:	4b91      	ldr	r3, [pc, #580]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ec:	4b8e      	ldr	r3, [pc, #568]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018f8:	d00c      	beq.n	8001914 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fa:	4b8b      	ldr	r3, [pc, #556]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d112      	bne.n	800192c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001906:	4b88      	ldr	r3, [pc, #544]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001912:	d10b      	bne.n	800192c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	4b84      	ldr	r3, [pc, #528]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d05b      	beq.n	80019d8 <HAL_RCC_OscConfig+0x124>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d157      	bne.n	80019d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e25a      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d106      	bne.n	8001944 <HAL_RCC_OscConfig+0x90>
 8001936:	4b7c      	ldr	r3, [pc, #496]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7b      	ldr	r2, [pc, #492]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e01d      	b.n	8001980 <HAL_RCC_OscConfig+0xcc>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0xb4>
 800194e:	4b76      	ldr	r3, [pc, #472]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a75      	ldr	r2, [pc, #468]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a72      	ldr	r2, [pc, #456]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0xcc>
 8001968:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a6e      	ldr	r2, [pc, #440]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 800196e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b6c      	ldr	r3, [pc, #432]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a6b      	ldr	r2, [pc, #428]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 800197a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff f97c 	bl	8000c84 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff f978 	bl	8000c84 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e21f      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0xdc>
 80019ae:	e014      	b.n	80019da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff f968 	bl	8000c84 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff f964 	bl	8000c84 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e20b      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x104>
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d06f      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019e6:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d017      	beq.n	8001a22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019f2:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d105      	bne.n	8001a0a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019fe:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00b      	beq.n	8001a22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	d11c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a16:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d116      	bne.n	8001a50 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x186>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e1d3      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4937      	ldr	r1, [pc, #220]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4e:	e03a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_RCC_OscConfig+0x278>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f911 	bl	8000c84 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a66:	f7ff f90d 	bl	8000c84 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e1b4      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4925      	ldr	r1, [pc, #148]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
 8001a98:	e015      	b.n	8001ac6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_OscConfig+0x278>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f8f0 	bl	8000c84 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa8:	f7ff f8ec 	bl	8000c84 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e193      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d036      	beq.n	8001b40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d016      	beq.n	8001b08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_RCC_OscConfig+0x27c>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f8d0 	bl	8000c84 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7ff f8cc 	bl	8000c84 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e173      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x234>
 8001b06:	e01b      	b.n	8001b40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_OscConfig+0x27c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f8b9 	bl	8000c84 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b14:	e00e      	b.n	8001b34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b16:	f7ff f8b5 	bl	8000c84 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d907      	bls.n	8001b34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e15c      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	42470000 	.word	0x42470000
 8001b30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b34:	4b8a      	ldr	r3, [pc, #552]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1ea      	bne.n	8001b16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 8097 	beq.w	8001c7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b52:	4b83      	ldr	r3, [pc, #524]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10f      	bne.n	8001b7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	4a7e      	ldr	r2, [pc, #504]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b7c      	ldr	r3, [pc, #496]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7e:	4b79      	ldr	r3, [pc, #484]	; (8001d64 <HAL_RCC_OscConfig+0x4b0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d118      	bne.n	8001bbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8a:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x4b0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a75      	ldr	r2, [pc, #468]	; (8001d64 <HAL_RCC_OscConfig+0x4b0>)
 8001b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b96:	f7ff f875 	bl	8000c84 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9e:	f7ff f871 	bl	8000c84 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e118      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	4b6c      	ldr	r3, [pc, #432]	; (8001d64 <HAL_RCC_OscConfig+0x4b0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x31e>
 8001bc4:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a65      	ldr	r2, [pc, #404]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x358>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x340>
 8001bda:	4b61      	ldr	r3, [pc, #388]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	4a60      	ldr	r2, [pc, #384]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70
 8001be6:	4b5e      	ldr	r3, [pc, #376]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bea:	4a5d      	ldr	r2, [pc, #372]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0x358>
 8001bf4:	4b5a      	ldr	r3, [pc, #360]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	4a59      	ldr	r2, [pc, #356]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001c00:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	4a56      	ldr	r2, [pc, #344]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	f023 0304 	bic.w	r3, r3, #4
 8001c0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d015      	beq.n	8001c40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff f836 	bl	8000c84 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1c:	f7ff f832 	bl	8000c84 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e0d7      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c32:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0ee      	beq.n	8001c1c <HAL_RCC_OscConfig+0x368>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c40:	f7ff f820 	bl	8000c84 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c48:	f7ff f81c 	bl	8000c84 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0c1      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5e:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1ee      	bne.n	8001c48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c70:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	4a3a      	ldr	r2, [pc, #232]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80ad 	beq.w	8001de0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c86:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d060      	beq.n	8001d54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d145      	bne.n	8001d26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9a:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <HAL_RCC_OscConfig+0x4b4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7fe fff0 	bl	8000c84 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7fe ffec 	bl	8000c84 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e093      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	019b      	lsls	r3, r3, #6
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	061b      	lsls	r3, r3, #24
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	071b      	lsls	r3, r3, #28
 8001cf2:	491b      	ldr	r1, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_RCC_OscConfig+0x4b4>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7fe ffc1 	bl	8000c84 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d06:	f7fe ffbd 	bl	8000c84 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e064      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x452>
 8001d24:	e05c      	b.n	8001de0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_RCC_OscConfig+0x4b4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7fe ffaa 	bl	8000c84 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d34:	f7fe ffa6 	bl	8000c84 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e04d      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_OscConfig+0x4ac>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x480>
 8001d52:	e045      	b.n	8001de0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e040      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000
 8001d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <HAL_RCC_OscConfig+0x538>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d030      	beq.n	8001ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d129      	bne.n	8001ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d122      	bne.n	8001ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d119      	bne.n	8001ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	3b01      	subs	r3, #1
 8001db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d10f      	bne.n	8001ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e041      	b.n	8001e86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f839 	bl	8001e8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f000 f9c0 	bl	80021b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d001      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e04e      	b.n	8001f5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_TIM_Base_Start_IT+0xc4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d022      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee6:	d01d      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1f      	ldr	r2, [pc, #124]	; (8001f6c <HAL_TIM_Base_Start_IT+0xc8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d018      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	; (8001f70 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d013      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00e      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d009      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <HAL_TIM_Base_Start_IT+0xd8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d004      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x80>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d111      	bne.n	8001f48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d010      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0201 	orr.w	r2, r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f46:	e007      	b.n	8001f58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	40000800 	.word	0x40000800
 8001f74:	40000c00 	.word	0x40000c00
 8001f78:	40010400 	.word	0x40010400
 8001f7c:	40014000 	.word	0x40014000
 8001f80:	40001800 	.word	0x40001800

08001f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d020      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0202 	mvn.w	r2, #2
 8001fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8d2 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f8c4 	bl	8002164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8d5 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d020      	beq.n	8002034 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0204 	mvn.w	r2, #4
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2202      	movs	r2, #2
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f8ac 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f89e 	bl	8002164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f8af 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d020      	beq.n	8002080 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d01b      	beq.n	8002080 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0208 	mvn.w	r2, #8
 8002050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2204      	movs	r2, #4
 8002056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f886 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f878 	bl	8002164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f889 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d020      	beq.n	80020cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01b      	beq.n	80020cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0210 	mvn.w	r2, #16
 800209c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2208      	movs	r2, #8
 80020a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f860 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 80020b8:	e005      	b.n	80020c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f852 	bl	8002164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f863 	bl	800218c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0201 	mvn.w	r2, #1
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fb9c 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00c      	beq.n	8002114 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f906 	bl	8002320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00c      	beq.n	8002138 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f834 	bl	80021a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00c      	beq.n	800215c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0220 	mvn.w	r2, #32
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f8d8 	bl	800230c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a46      	ldr	r2, [pc, #280]	; (80022e0 <TIM_Base_SetConfig+0x12c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d013      	beq.n	80021f4 <TIM_Base_SetConfig+0x40>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d2:	d00f      	beq.n	80021f4 <TIM_Base_SetConfig+0x40>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a43      	ldr	r2, [pc, #268]	; (80022e4 <TIM_Base_SetConfig+0x130>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00b      	beq.n	80021f4 <TIM_Base_SetConfig+0x40>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a42      	ldr	r2, [pc, #264]	; (80022e8 <TIM_Base_SetConfig+0x134>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d007      	beq.n	80021f4 <TIM_Base_SetConfig+0x40>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a41      	ldr	r2, [pc, #260]	; (80022ec <TIM_Base_SetConfig+0x138>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <TIM_Base_SetConfig+0x40>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a40      	ldr	r2, [pc, #256]	; (80022f0 <TIM_Base_SetConfig+0x13c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d108      	bne.n	8002206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a35      	ldr	r2, [pc, #212]	; (80022e0 <TIM_Base_SetConfig+0x12c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02b      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002214:	d027      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a32      	ldr	r2, [pc, #200]	; (80022e4 <TIM_Base_SetConfig+0x130>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d023      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a31      	ldr	r2, [pc, #196]	; (80022e8 <TIM_Base_SetConfig+0x134>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01f      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a30      	ldr	r2, [pc, #192]	; (80022ec <TIM_Base_SetConfig+0x138>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01b      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a2f      	ldr	r2, [pc, #188]	; (80022f0 <TIM_Base_SetConfig+0x13c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d017      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a2e      	ldr	r2, [pc, #184]	; (80022f4 <TIM_Base_SetConfig+0x140>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a2d      	ldr	r2, [pc, #180]	; (80022f8 <TIM_Base_SetConfig+0x144>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00f      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <TIM_Base_SetConfig+0x148>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00b      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <TIM_Base_SetConfig+0x14c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <TIM_Base_SetConfig+0x150>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d003      	beq.n	8002266 <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a29      	ldr	r2, [pc, #164]	; (8002308 <TIM_Base_SetConfig+0x154>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d108      	bne.n	8002278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <TIM_Base_SetConfig+0x12c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d003      	beq.n	80022ac <TIM_Base_SetConfig+0xf8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <TIM_Base_SetConfig+0x13c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d103      	bne.n	80022b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f023 0201 	bic.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	611a      	str	r2, [r3, #16]
  }
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40010000 	.word	0x40010000
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40000800 	.word	0x40000800
 80022ec:	40000c00 	.word	0x40000c00
 80022f0:	40010400 	.word	0x40010400
 80022f4:	40014000 	.word	0x40014000
 80022f8:	40014400 	.word	0x40014400
 80022fc:	40014800 	.word	0x40014800
 8002300:	40001800 	.word	0x40001800
 8002304:	40001c00 	.word	0x40001c00
 8002308:	40002000 	.word	0x40002000

0800230c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e042      	b.n	80023cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fad2 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f82b 	bl	80023d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800238c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800239c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d8:	b0c0      	sub	sp, #256	; 0x100
 80023da:	af00      	add	r7, sp, #0
 80023dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f0:	68d9      	ldr	r1, [r3, #12]
 80023f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	ea40 0301 	orr.w	r3, r0, r1
 80023fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	431a      	orrs	r2, r3
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	431a      	orrs	r2, r3
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800242c:	f021 010c 	bic.w	r1, r1, #12
 8002430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800243a:	430b      	orrs	r3, r1
 800243c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800243e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800244a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244e:	6999      	ldr	r1, [r3, #24]
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	ea40 0301 	orr.w	r3, r0, r1
 800245a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800245c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4b8f      	ldr	r3, [pc, #572]	; (80026a0 <UART_SetConfig+0x2cc>)
 8002464:	429a      	cmp	r2, r3
 8002466:	d005      	beq.n	8002474 <UART_SetConfig+0xa0>
 8002468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4b8d      	ldr	r3, [pc, #564]	; (80026a4 <UART_SetConfig+0x2d0>)
 8002470:	429a      	cmp	r2, r3
 8002472:	d104      	bne.n	800247e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002474:	f7fe ffa8 	bl	80013c8 <HAL_RCC_GetPCLK2Freq>
 8002478:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800247c:	e003      	b.n	8002486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800247e:	f7fe ff8f 	bl	80013a0 <HAL_RCC_GetPCLK1Freq>
 8002482:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002490:	f040 810c 	bne.w	80026ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002498:	2200      	movs	r2, #0
 800249a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800249e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024a6:	4622      	mov	r2, r4
 80024a8:	462b      	mov	r3, r5
 80024aa:	1891      	adds	r1, r2, r2
 80024ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80024ae:	415b      	adcs	r3, r3
 80024b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024b6:	4621      	mov	r1, r4
 80024b8:	eb12 0801 	adds.w	r8, r2, r1
 80024bc:	4629      	mov	r1, r5
 80024be:	eb43 0901 	adc.w	r9, r3, r1
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024d6:	4690      	mov	r8, r2
 80024d8:	4699      	mov	r9, r3
 80024da:	4623      	mov	r3, r4
 80024dc:	eb18 0303 	adds.w	r3, r8, r3
 80024e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024e4:	462b      	mov	r3, r5
 80024e6:	eb49 0303 	adc.w	r3, r9, r3
 80024ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002502:	460b      	mov	r3, r1
 8002504:	18db      	adds	r3, r3, r3
 8002506:	653b      	str	r3, [r7, #80]	; 0x50
 8002508:	4613      	mov	r3, r2
 800250a:	eb42 0303 	adc.w	r3, r2, r3
 800250e:	657b      	str	r3, [r7, #84]	; 0x54
 8002510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002518:	f7fd feca 	bl	80002b0 <__aeabi_uldivmod>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4b61      	ldr	r3, [pc, #388]	; (80026a8 <UART_SetConfig+0x2d4>)
 8002522:	fba3 2302 	umull	r2, r3, r3, r2
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	011c      	lsls	r4, r3, #4
 800252a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800252e:	2200      	movs	r2, #0
 8002530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002534:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800253c:	4642      	mov	r2, r8
 800253e:	464b      	mov	r3, r9
 8002540:	1891      	adds	r1, r2, r2
 8002542:	64b9      	str	r1, [r7, #72]	; 0x48
 8002544:	415b      	adcs	r3, r3
 8002546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800254c:	4641      	mov	r1, r8
 800254e:	eb12 0a01 	adds.w	sl, r2, r1
 8002552:	4649      	mov	r1, r9
 8002554:	eb43 0b01 	adc.w	fp, r3, r1
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800256c:	4692      	mov	sl, r2
 800256e:	469b      	mov	fp, r3
 8002570:	4643      	mov	r3, r8
 8002572:	eb1a 0303 	adds.w	r3, sl, r3
 8002576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800257a:	464b      	mov	r3, r9
 800257c:	eb4b 0303 	adc.w	r3, fp, r3
 8002580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002590:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002598:	460b      	mov	r3, r1
 800259a:	18db      	adds	r3, r3, r3
 800259c:	643b      	str	r3, [r7, #64]	; 0x40
 800259e:	4613      	mov	r3, r2
 80025a0:	eb42 0303 	adc.w	r3, r2, r3
 80025a4:	647b      	str	r3, [r7, #68]	; 0x44
 80025a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025ae:	f7fd fe7f 	bl	80002b0 <__aeabi_uldivmod>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4611      	mov	r1, r2
 80025b8:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <UART_SetConfig+0x2d4>)
 80025ba:	fba3 2301 	umull	r2, r3, r3, r1
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2264      	movs	r2, #100	; 0x64
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	1acb      	subs	r3, r1, r3
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025ce:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <UART_SetConfig+0x2d4>)
 80025d0:	fba3 2302 	umull	r2, r3, r3, r2
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025dc:	441c      	add	r4, r3
 80025de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025e2:	2200      	movs	r2, #0
 80025e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025f0:	4642      	mov	r2, r8
 80025f2:	464b      	mov	r3, r9
 80025f4:	1891      	adds	r1, r2, r2
 80025f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80025f8:	415b      	adcs	r3, r3
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002600:	4641      	mov	r1, r8
 8002602:	1851      	adds	r1, r2, r1
 8002604:	6339      	str	r1, [r7, #48]	; 0x30
 8002606:	4649      	mov	r1, r9
 8002608:	414b      	adcs	r3, r1
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002618:	4659      	mov	r1, fp
 800261a:	00cb      	lsls	r3, r1, #3
 800261c:	4651      	mov	r1, sl
 800261e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002622:	4651      	mov	r1, sl
 8002624:	00ca      	lsls	r2, r1, #3
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	4603      	mov	r3, r0
 800262c:	4642      	mov	r2, r8
 800262e:	189b      	adds	r3, r3, r2
 8002630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002634:	464b      	mov	r3, r9
 8002636:	460a      	mov	r2, r1
 8002638:	eb42 0303 	adc.w	r3, r2, r3
 800263c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800264c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002654:	460b      	mov	r3, r1
 8002656:	18db      	adds	r3, r3, r3
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
 800265a:	4613      	mov	r3, r2
 800265c:	eb42 0303 	adc.w	r3, r2, r3
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800266a:	f7fd fe21 	bl	80002b0 <__aeabi_uldivmod>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <UART_SetConfig+0x2d4>)
 8002674:	fba3 1302 	umull	r1, r3, r3, r2
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	2164      	movs	r1, #100	; 0x64
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	3332      	adds	r3, #50	; 0x32
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <UART_SetConfig+0x2d4>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	f003 0207 	and.w	r2, r3, #7
 8002692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4422      	add	r2, r4
 800269a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800269c:	e106      	b.n	80028ac <UART_SetConfig+0x4d8>
 800269e:	bf00      	nop
 80026a0:	40011000 	.word	0x40011000
 80026a4:	40011400 	.word	0x40011400
 80026a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b0:	2200      	movs	r2, #0
 80026b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026be:	4642      	mov	r2, r8
 80026c0:	464b      	mov	r3, r9
 80026c2:	1891      	adds	r1, r2, r2
 80026c4:	6239      	str	r1, [r7, #32]
 80026c6:	415b      	adcs	r3, r3
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ce:	4641      	mov	r1, r8
 80026d0:	1854      	adds	r4, r2, r1
 80026d2:	4649      	mov	r1, r9
 80026d4:	eb43 0501 	adc.w	r5, r3, r1
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	00eb      	lsls	r3, r5, #3
 80026e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e6:	00e2      	lsls	r2, r4, #3
 80026e8:	4614      	mov	r4, r2
 80026ea:	461d      	mov	r5, r3
 80026ec:	4643      	mov	r3, r8
 80026ee:	18e3      	adds	r3, r4, r3
 80026f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026f4:	464b      	mov	r3, r9
 80026f6:	eb45 0303 	adc.w	r3, r5, r3
 80026fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800270a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800271a:	4629      	mov	r1, r5
 800271c:	008b      	lsls	r3, r1, #2
 800271e:	4621      	mov	r1, r4
 8002720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002724:	4621      	mov	r1, r4
 8002726:	008a      	lsls	r2, r1, #2
 8002728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800272c:	f7fd fdc0 	bl	80002b0 <__aeabi_uldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4b60      	ldr	r3, [pc, #384]	; (80028b8 <UART_SetConfig+0x4e4>)
 8002736:	fba3 2302 	umull	r2, r3, r3, r2
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	011c      	lsls	r4, r3, #4
 800273e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002742:	2200      	movs	r2, #0
 8002744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002748:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800274c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002750:	4642      	mov	r2, r8
 8002752:	464b      	mov	r3, r9
 8002754:	1891      	adds	r1, r2, r2
 8002756:	61b9      	str	r1, [r7, #24]
 8002758:	415b      	adcs	r3, r3
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002760:	4641      	mov	r1, r8
 8002762:	1851      	adds	r1, r2, r1
 8002764:	6139      	str	r1, [r7, #16]
 8002766:	4649      	mov	r1, r9
 8002768:	414b      	adcs	r3, r1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002778:	4659      	mov	r1, fp
 800277a:	00cb      	lsls	r3, r1, #3
 800277c:	4651      	mov	r1, sl
 800277e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002782:	4651      	mov	r1, sl
 8002784:	00ca      	lsls	r2, r1, #3
 8002786:	4610      	mov	r0, r2
 8002788:	4619      	mov	r1, r3
 800278a:	4603      	mov	r3, r0
 800278c:	4642      	mov	r2, r8
 800278e:	189b      	adds	r3, r3, r2
 8002790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002794:	464b      	mov	r3, r9
 8002796:	460a      	mov	r2, r1
 8002798:	eb42 0303 	adc.w	r3, r2, r3
 800279c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80027aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027b8:	4649      	mov	r1, r9
 80027ba:	008b      	lsls	r3, r1, #2
 80027bc:	4641      	mov	r1, r8
 80027be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027c2:	4641      	mov	r1, r8
 80027c4:	008a      	lsls	r2, r1, #2
 80027c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027ca:	f7fd fd71 	bl	80002b0 <__aeabi_uldivmod>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <UART_SetConfig+0x4e4>)
 80027d6:	fba3 2301 	umull	r2, r3, r3, r1
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2264      	movs	r2, #100	; 0x64
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	1acb      	subs	r3, r1, r3
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	3332      	adds	r3, #50	; 0x32
 80027e8:	4a33      	ldr	r2, [pc, #204]	; (80028b8 <UART_SetConfig+0x4e4>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f4:	441c      	add	r4, r3
 80027f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027fa:	2200      	movs	r2, #0
 80027fc:	673b      	str	r3, [r7, #112]	; 0x70
 80027fe:	677a      	str	r2, [r7, #116]	; 0x74
 8002800:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002804:	4642      	mov	r2, r8
 8002806:	464b      	mov	r3, r9
 8002808:	1891      	adds	r1, r2, r2
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	415b      	adcs	r3, r3
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002814:	4641      	mov	r1, r8
 8002816:	1851      	adds	r1, r2, r1
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	4649      	mov	r1, r9
 800281c:	414b      	adcs	r3, r1
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800282c:	4659      	mov	r1, fp
 800282e:	00cb      	lsls	r3, r1, #3
 8002830:	4651      	mov	r1, sl
 8002832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002836:	4651      	mov	r1, sl
 8002838:	00ca      	lsls	r2, r1, #3
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	4603      	mov	r3, r0
 8002840:	4642      	mov	r2, r8
 8002842:	189b      	adds	r3, r3, r2
 8002844:	66bb      	str	r3, [r7, #104]	; 0x68
 8002846:	464b      	mov	r3, r9
 8002848:	460a      	mov	r2, r1
 800284a:	eb42 0303 	adc.w	r3, r2, r3
 800284e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	663b      	str	r3, [r7, #96]	; 0x60
 800285a:	667a      	str	r2, [r7, #100]	; 0x64
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002868:	4649      	mov	r1, r9
 800286a:	008b      	lsls	r3, r1, #2
 800286c:	4641      	mov	r1, r8
 800286e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002872:	4641      	mov	r1, r8
 8002874:	008a      	lsls	r2, r1, #2
 8002876:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800287a:	f7fd fd19 	bl	80002b0 <__aeabi_uldivmod>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <UART_SetConfig+0x4e4>)
 8002884:	fba3 1302 	umull	r1, r3, r3, r2
 8002888:	095b      	lsrs	r3, r3, #5
 800288a:	2164      	movs	r1, #100	; 0x64
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	3332      	adds	r3, #50	; 0x32
 8002896:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <UART_SetConfig+0x4e4>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	f003 020f 	and.w	r2, r3, #15
 80028a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4422      	add	r2, r4
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028b2:	46bd      	mov	sp, r7
 80028b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028b8:	51eb851f 	.word	0x51eb851f

080028bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <SysTick_Handler+0x1c>)
 80028c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80028c4:	f001 fcb6 	bl	8004234 <xTaskGetSchedulerState>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d001      	beq.n	80028d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80028ce:	f000 fbab 	bl	8003028 <xPortSysTickHandler>
  }
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	e000e010 	.word	0xe000e010

080028dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80028e8:	f001 f93c 	bl	8003b64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80028ec:	4b5b      	ldr	r3, [pc, #364]	; (8002a5c <pvPortMalloc+0x180>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80028f4:	f000 f920 	bl	8002b38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80028f8:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <pvPortMalloc+0x184>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	f040 8093 	bne.w	8002a2c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01d      	beq.n	8002948 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800290c:	2208      	movs	r2, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	2b00      	cmp	r3, #0
 800291c:	d014      	beq.n	8002948 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f023 0307 	bic.w	r3, r3, #7
 8002924:	3308      	adds	r3, #8
 8002926:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002944:	bf00      	nop
 8002946:	e7fe      	b.n	8002946 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d06e      	beq.n	8002a2c <pvPortMalloc+0x150>
 800294e:	4b45      	ldr	r3, [pc, #276]	; (8002a64 <pvPortMalloc+0x188>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d869      	bhi.n	8002a2c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002958:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <pvPortMalloc+0x18c>)
 800295a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800295c:	4b42      	ldr	r3, [pc, #264]	; (8002a68 <pvPortMalloc+0x18c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002962:	e004      	b.n	800296e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	d903      	bls.n	8002980 <pvPortMalloc+0xa4>
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f1      	bne.n	8002964 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002980:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <pvPortMalloc+0x180>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002986:	429a      	cmp	r2, r3
 8002988:	d050      	beq.n	8002a2c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2208      	movs	r2, #8
 8002990:	4413      	add	r3, r2
 8002992:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad2      	subs	r2, r2, r3
 80029a4:	2308      	movs	r3, #8
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d91f      	bls.n	80029ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80029ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <pvPortMalloc+0xf8>
	__asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	613b      	str	r3, [r7, #16]
}
 80029d0:	bf00      	nop
 80029d2:	e7fe      	b.n	80029d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	1ad2      	subs	r2, r2, r3
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80029e6:	69b8      	ldr	r0, [r7, #24]
 80029e8:	f000 f908 	bl	8002bfc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80029ec:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <pvPortMalloc+0x188>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <pvPortMalloc+0x188>)
 80029f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <pvPortMalloc+0x188>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <pvPortMalloc+0x190>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d203      	bcs.n	8002a0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <pvPortMalloc+0x188>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <pvPortMalloc+0x190>)
 8002a0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <pvPortMalloc+0x184>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <pvPortMalloc+0x194>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	4a11      	ldr	r2, [pc, #68]	; (8002a70 <pvPortMalloc+0x194>)
 8002a2a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002a2c:	f001 f8a8 	bl	8003b80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <pvPortMalloc+0x174>
	__asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	60fb      	str	r3, [r7, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	e7fe      	b.n	8002a4e <pvPortMalloc+0x172>
	return pvReturn;
 8002a50:	69fb      	ldr	r3, [r7, #28]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3728      	adds	r7, #40	; 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20003d28 	.word	0x20003d28
 8002a60:	20003d3c 	.word	0x20003d3c
 8002a64:	20003d2c 	.word	0x20003d2c
 8002a68:	20003d20 	.word	0x20003d20
 8002a6c:	20003d30 	.word	0x20003d30
 8002a70:	20003d34 	.word	0x20003d34

08002a74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d04d      	beq.n	8002b22 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002a86:	2308      	movs	r3, #8
 8002a88:	425b      	negs	r3, r3
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <vPortFree+0xb8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <vPortFree+0x44>
	__asm volatile
 8002aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	60fb      	str	r3, [r7, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	e7fe      	b.n	8002ab6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <vPortFree+0x62>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	60bb      	str	r3, [r7, #8]
}
 8002ad2:	bf00      	nop
 8002ad4:	e7fe      	b.n	8002ad4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <vPortFree+0xb8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01e      	beq.n	8002b22 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d11a      	bne.n	8002b22 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <vPortFree+0xb8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	401a      	ands	r2, r3
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002afc:	f001 f832 	bl	8003b64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <vPortFree+0xbc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4413      	add	r3, r2
 8002b0a:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <vPortFree+0xbc>)
 8002b0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b0e:	6938      	ldr	r0, [r7, #16]
 8002b10:	f000 f874 	bl	8002bfc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <vPortFree+0xc0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	4a06      	ldr	r2, [pc, #24]	; (8002b34 <vPortFree+0xc0>)
 8002b1c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002b1e:	f001 f82f 	bl	8003b80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20003d3c 	.word	0x20003d3c
 8002b30:	20003d2c 	.word	0x20003d2c
 8002b34:	20003d38 	.word	0x20003d38

08002b38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002b42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002b44:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <prvHeapInit+0xac>)
 8002b46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00c      	beq.n	8002b6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3307      	adds	r3, #7
 8002b56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0307 	bic.w	r3, r3, #7
 8002b5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <prvHeapInit+0xac>)
 8002b68:	4413      	add	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b70:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <prvHeapInit+0xb0>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002b76:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <prvHeapInit+0xb0>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	4413      	add	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002b84:	2208      	movs	r2, #8
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0307 	bic.w	r3, r3, #7
 8002b92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a15      	ldr	r2, [pc, #84]	; (8002bec <prvHeapInit+0xb4>)
 8002b98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002b9a:	4b14      	ldr	r3, [pc, #80]	; (8002bec <prvHeapInit+0xb4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002ba2:	4b12      	ldr	r3, [pc, #72]	; (8002bec <prvHeapInit+0xb4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	1ad2      	subs	r2, r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <prvHeapInit+0xb4>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <prvHeapInit+0xb8>)
 8002bc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <prvHeapInit+0xbc>)
 8002bce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <prvHeapInit+0xc0>)
 8002bd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002bd6:	601a      	str	r2, [r3, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	20000120 	.word	0x20000120
 8002be8:	20003d20 	.word	0x20003d20
 8002bec:	20003d28 	.word	0x20003d28
 8002bf0:	20003d30 	.word	0x20003d30
 8002bf4:	20003d2c 	.word	0x20003d2c
 8002bf8:	20003d3c 	.word	0x20003d3c

08002bfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c04:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <prvInsertBlockIntoFreeList+0xac>)
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	e002      	b.n	8002c10 <prvInsertBlockIntoFreeList+0x14>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d8f7      	bhi.n	8002c0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	4413      	add	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d108      	bne.n	8002c3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	441a      	add	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	441a      	add	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d118      	bne.n	8002c84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <prvInsertBlockIntoFreeList+0xb0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d00d      	beq.n	8002c7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	441a      	add	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e008      	b.n	8002c8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <prvInsertBlockIntoFreeList+0xb0>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e003      	b.n	8002c8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d002      	beq.n	8002c9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20003d20 	.word	0x20003d20
 8002cac:	20003d28 	.word	0x20003d28

08002cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f103 0208 	add.w	r2, r3, #8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f103 0208 	add.w	r2, r3, #8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f103 0208 	add.w	r2, r3, #8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	601a      	str	r2, [r3, #0]
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d68:	d103      	bne.n	8002d72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e00c      	b.n	8002d8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3308      	adds	r3, #8
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e002      	b.n	8002d80 <vListInsert+0x2e>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d2f6      	bcs.n	8002d7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	601a      	str	r2, [r3, #0]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6892      	ldr	r2, [r2, #8]
 8002dda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6852      	ldr	r2, [r2, #4]
 8002de4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d103      	bne.n	8002df8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	1e5a      	subs	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3b04      	subs	r3, #4
 8002e28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3b04      	subs	r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f023 0201 	bic.w	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3b04      	subs	r3, #4
 8002e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e48:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <pxPortInitialiseStack+0x64>)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3b14      	subs	r3, #20
 8002e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3b04      	subs	r3, #4
 8002e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f06f 0202 	mvn.w	r2, #2
 8002e66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3b20      	subs	r3, #32
 8002e6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	08002e81 	.word	0x08002e81

08002e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <prvTaskExitError+0x54>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e92:	d00a      	beq.n	8002eaa <prvTaskExitError+0x2a>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	60fb      	str	r3, [r7, #12]
}
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <prvTaskExitError+0x28>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	60bb      	str	r3, [r7, #8]
}
 8002ebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002ebe:	bf00      	nop
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0fc      	beq.n	8002ec0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	2000000c 	.word	0x2000000c
	...

08002ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ee0:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <pxCurrentTCBConst2>)
 8002ee2:	6819      	ldr	r1, [r3, #0]
 8002ee4:	6808      	ldr	r0, [r1, #0]
 8002ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eea:	f380 8809 	msr	PSP, r0
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f380 8811 	msr	BASEPRI, r0
 8002efa:	4770      	bx	lr
 8002efc:	f3af 8000 	nop.w

08002f00 <pxCurrentTCBConst2>:
 8002f00:	20003d40 	.word	0x20003d40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop

08002f08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	607b      	str	r3, [r7, #4]
}
 8002f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002f22:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <vPortEnterCritical+0x58>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	4a0d      	ldr	r2, [pc, #52]	; (8002f60 <vPortEnterCritical+0x58>)
 8002f2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <vPortEnterCritical+0x58>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10f      	bne.n	8002f54 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <vPortEnterCritical+0x5c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <vPortEnterCritical+0x4c>
	__asm volatile
 8002f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f42:	f383 8811 	msr	BASEPRI, r3
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	603b      	str	r3, [r7, #0]
}
 8002f50:	bf00      	nop
 8002f52:	e7fe      	b.n	8002f52 <vPortEnterCritical+0x4a>
	}
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	2000000c 	.word	0x2000000c
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <vPortExitCritical+0x50>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <vPortExitCritical+0x24>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	607b      	str	r3, [r7, #4]
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <vPortExitCritical+0x50>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	4a09      	ldr	r2, [pc, #36]	; (8002fb8 <vPortExitCritical+0x50>)
 8002f94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <vPortExitCritical+0x50>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <vPortExitCritical+0x42>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fa8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	2000000c 	.word	0x2000000c
 8002fbc:	00000000 	.word	0x00000000

08002fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002fc0:	f3ef 8009 	mrs	r0, PSP
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	4b15      	ldr	r3, [pc, #84]	; (8003020 <pxCurrentTCBConst>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	f01e 0f10 	tst.w	lr, #16
 8002fd0:	bf08      	it	eq
 8002fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fda:	6010      	str	r0, [r2, #0]
 8002fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002fe4:	f380 8811 	msr	BASEPRI, r0
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f000 ff1e 	bl	8003e30 <vTaskSwitchContext>
 8002ff4:	f04f 0000 	mov.w	r0, #0
 8002ff8:	f380 8811 	msr	BASEPRI, r0
 8002ffc:	bc09      	pop	{r0, r3}
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	6808      	ldr	r0, [r1, #0]
 8003002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003006:	f01e 0f10 	tst.w	lr, #16
 800300a:	bf08      	it	eq
 800300c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003010:	f380 8809 	msr	PSP, r0
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	f3af 8000 	nop.w

08003020 <pxCurrentTCBConst>:
 8003020:	20003d40 	.word	0x20003d40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop

08003028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
	__asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	607b      	str	r3, [r7, #4]
}
 8003040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003042:	f000 fe3b 	bl	8003cbc <xTaskIncrementTick>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <xPortSysTickHandler+0x40>)
 800304e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	2300      	movs	r3, #0
 8003056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f383 8811 	msr	BASEPRI, r3
}
 800305e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	e000ed04 	.word	0xe000ed04

0800306c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <xQueueGenericReset+0x2a>
	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	60bb      	str	r3, [r7, #8]
}
 8003092:	bf00      	nop
 8003094:	e7fe      	b.n	8003094 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003096:	f7ff ff37 	bl	8002f08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a2:	68f9      	ldr	r1, [r7, #12]
 80030a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	441a      	add	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	3b01      	subs	r3, #1
 80030c8:	68f9      	ldr	r1, [r7, #12]
 80030ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	441a      	add	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	22ff      	movs	r2, #255	; 0xff
 80030da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	22ff      	movs	r2, #255	; 0xff
 80030e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d114      	bne.n	8003116 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01a      	beq.n	800312a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3310      	adds	r3, #16
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 ff1b 	bl	8003f34 <xTaskRemoveFromEventList>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d012      	beq.n	800312a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <xQueueGenericReset+0xcc>)
 8003106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	e009      	b.n	800312a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3310      	adds	r3, #16
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fdc8 	bl	8002cb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3324      	adds	r3, #36	; 0x24
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fdc3 	bl	8002cb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800312a:	f7ff ff1d 	bl	8002f68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800312e:	2301      	movs	r3, #1
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	e000ed04 	.word	0xe000ed04

0800313c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	4613      	mov	r3, r2
 8003148:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	613b      	str	r3, [r7, #16]
}
 8003162:	bf00      	nop
 8003164:	e7fe      	b.n	8003164 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	3350      	adds	r3, #80	; 0x50
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fbb1 	bl	80028dc <pvPortMalloc>
 800317a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d011      	beq.n	80031a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3350      	adds	r3, #80	; 0x50
 800318a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003194:	79fa      	ldrb	r2, [r7, #7]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	4613      	mov	r3, r2
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f805 	bl	80031b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031a6:	69bb      	ldr	r3, [r7, #24]
	}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e002      	b.n	80031d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031de:	2101      	movs	r1, #1
 80031e0:	69b8      	ldr	r0, [r7, #24]
 80031e2:	f7ff ff43 	bl	800306c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00e      	beq.n	8003222 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003216:	2300      	movs	r3, #0
 8003218:	2200      	movs	r2, #0
 800321a:	2100      	movs	r1, #0
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f81d 	bl	800325c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003234:	2301      	movs	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	461a      	mov	r2, r3
 8003240:	6939      	ldr	r1, [r7, #16]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff7a 	bl	800313c <xQueueGenericCreate>
 8003248:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7ff ffd3 	bl	80031f6 <prvInitialiseMutex>

		return xNewQueue;
 8003250:	68fb      	ldr	r3, [r7, #12]
	}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08e      	sub	sp, #56	; 0x38
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800326a:	2300      	movs	r3, #0
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <xQueueGenericSend+0x32>
	__asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800328a:	bf00      	nop
 800328c:	e7fe      	b.n	800328c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d103      	bne.n	800329c <xQueueGenericSend+0x40>
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <xQueueGenericSend+0x44>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <xQueueGenericSend+0x46>
 80032a0:	2300      	movs	r3, #0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <xQueueGenericSend+0x60>
	__asm volatile
 80032a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032b8:	bf00      	nop
 80032ba:	e7fe      	b.n	80032ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d103      	bne.n	80032ca <xQueueGenericSend+0x6e>
 80032c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <xQueueGenericSend+0x72>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <xQueueGenericSend+0x74>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <xQueueGenericSend+0x8e>
	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	623b      	str	r3, [r7, #32]
}
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032ea:	f000 ffa3 	bl	8004234 <xTaskGetSchedulerState>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <xQueueGenericSend+0x9e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <xQueueGenericSend+0xa2>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <xQueueGenericSend+0xa4>
 80032fe:	2300      	movs	r3, #0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <xQueueGenericSend+0xbe>
	__asm volatile
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	61fb      	str	r3, [r7, #28]
}
 8003316:	bf00      	nop
 8003318:	e7fe      	b.n	8003318 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800331a:	f7ff fdf5 	bl	8002f08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	429a      	cmp	r2, r3
 8003328:	d302      	bcc.n	8003330 <xQueueGenericSend+0xd4>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d129      	bne.n	8003384 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003336:	f000 f9b3 	bl	80036a0 <prvCopyDataToQueue>
 800333a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	2b00      	cmp	r3, #0
 8003342:	d010      	beq.n	8003366 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	3324      	adds	r3, #36	; 0x24
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fdf3 	bl	8003f34 <xTaskRemoveFromEventList>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003354:	4b3f      	ldr	r3, [pc, #252]	; (8003454 <xQueueGenericSend+0x1f8>)
 8003356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	e00a      	b.n	800337c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800336c:	4b39      	ldr	r3, [pc, #228]	; (8003454 <xQueueGenericSend+0x1f8>)
 800336e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800337c:	f7ff fdf4 	bl	8002f68 <vPortExitCritical>
				return pdPASS;
 8003380:	2301      	movs	r3, #1
 8003382:	e063      	b.n	800344c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800338a:	f7ff fded 	bl	8002f68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800338e:	2300      	movs	r3, #0
 8003390:	e05c      	b.n	800344c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003398:	f107 0314 	add.w	r3, r7, #20
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fe2d 	bl	8003ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033a2:	2301      	movs	r3, #1
 80033a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033a6:	f7ff fddf 	bl	8002f68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033aa:	f000 fbdb 	bl	8003b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033ae:	f7ff fdab 	bl	8002f08 <vPortEnterCritical>
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033b8:	b25b      	sxtb	r3, r3
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033be:	d103      	bne.n	80033c8 <xQueueGenericSend+0x16c>
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033ce:	b25b      	sxtb	r3, r3
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d4:	d103      	bne.n	80033de <xQueueGenericSend+0x182>
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033de:	f7ff fdc3 	bl	8002f68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033e2:	1d3a      	adds	r2, r7, #4
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	4611      	mov	r1, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fe1c 	bl	8004028 <xTaskCheckForTimeOut>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d124      	bne.n	8003440 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033f8:	f000 fa24 	bl	8003844 <prvIsQueueFull>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d018      	beq.n	8003434 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	3310      	adds	r3, #16
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fd6e 	bl	8003eec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003412:	f000 f9af 	bl	8003774 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003416:	f000 fbb3 	bl	8003b80 <xTaskResumeAll>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	f47f af7c 	bne.w	800331a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <xQueueGenericSend+0x1f8>)
 8003424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	e772      	b.n	800331a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003436:	f000 f99d 	bl	8003774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800343a:	f000 fba1 	bl	8003b80 <xTaskResumeAll>
 800343e:	e76c      	b.n	800331a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003442:	f000 f997 	bl	8003774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003446:	f000 fb9b 	bl	8003b80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800344a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800344c:	4618      	mov	r0, r3
 800344e:	3738      	adds	r7, #56	; 0x38
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	e000ed04 	.word	0xe000ed04

08003458 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08e      	sub	sp, #56	; 0x38
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800346a:	2300      	movs	r3, #0
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	623b      	str	r3, [r7, #32]
}
 8003486:	bf00      	nop
 8003488:	e7fe      	b.n	8003488 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	61fb      	str	r3, [r7, #28]
}
 80034a4:	bf00      	nop
 80034a6:	e7fe      	b.n	80034a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034a8:	f000 fec4 	bl	8004234 <xTaskGetSchedulerState>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <xQueueSemaphoreTake+0x60>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <xQueueSemaphoreTake+0x64>
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <xQueueSemaphoreTake+0x66>
 80034bc:	2300      	movs	r3, #0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10a      	bne.n	80034d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80034c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	61bb      	str	r3, [r7, #24]
}
 80034d4:	bf00      	nop
 80034d6:	e7fe      	b.n	80034d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034d8:	f7ff fd16 	bl	8002f08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d024      	beq.n	8003532 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	1e5a      	subs	r2, r3, #1
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80034f8:	f001 f812 	bl	8004520 <pvTaskIncrementMutexHeldCount>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00f      	beq.n	800352a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	3310      	adds	r3, #16
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fd10 	bl	8003f34 <xTaskRemoveFromEventList>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800351a:	4b54      	ldr	r3, [pc, #336]	; (800366c <xQueueSemaphoreTake+0x214>)
 800351c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800352a:	f7ff fd1d 	bl	8002f68 <vPortExitCritical>
				return pdPASS;
 800352e:	2301      	movs	r3, #1
 8003530:	e097      	b.n	8003662 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d111      	bne.n	800355c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	617b      	str	r3, [r7, #20]
}
 8003550:	bf00      	nop
 8003552:	e7fe      	b.n	8003552 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003554:	f7ff fd08 	bl	8002f68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003558:	2300      	movs	r3, #0
 800355a:	e082      	b.n	8003662 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800355c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fd48 	bl	8003ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800356c:	2301      	movs	r3, #1
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003570:	f7ff fcfa 	bl	8002f68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003574:	f000 faf6 	bl	8003b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003578:	f7ff fcc6 	bl	8002f08 <vPortEnterCritical>
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003582:	b25b      	sxtb	r3, r3
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003588:	d103      	bne.n	8003592 <xQueueSemaphoreTake+0x13a>
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003598:	b25b      	sxtb	r3, r3
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800359e:	d103      	bne.n	80035a8 <xQueueSemaphoreTake+0x150>
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a8:	f7ff fcde 	bl	8002f68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ac:	463a      	mov	r2, r7
 80035ae:	f107 030c 	add.w	r3, r7, #12
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fd37 	bl	8004028 <xTaskCheckForTimeOut>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d132      	bne.n	8003626 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035c2:	f000 f929 	bl	8003818 <prvIsQueueEmpty>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d026      	beq.n	800361a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80035d4:	f7ff fc98 	bl	8002f08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fe47 	bl	8004270 <xTaskPriorityInherit>
 80035e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80035e4:	f7ff fcc0 	bl	8002f68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	3324      	adds	r3, #36	; 0x24
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fc7b 	bl	8003eec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035f8:	f000 f8bc 	bl	8003774 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035fc:	f000 fac0 	bl	8003b80 <xTaskResumeAll>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	f47f af68 	bne.w	80034d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003608:	4b18      	ldr	r3, [pc, #96]	; (800366c <xQueueSemaphoreTake+0x214>)
 800360a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	e75e      	b.n	80034d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800361a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800361c:	f000 f8aa 	bl	8003774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003620:	f000 faae 	bl	8003b80 <xTaskResumeAll>
 8003624:	e758      	b.n	80034d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003628:	f000 f8a4 	bl	8003774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800362c:	f000 faa8 	bl	8003b80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003632:	f000 f8f1 	bl	8003818 <prvIsQueueEmpty>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	f43f af4d 	beq.w	80034d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00d      	beq.n	8003660 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003644:	f7ff fc60 	bl	8002f08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800364a:	f000 f811 	bl	8003670 <prvGetDisinheritPriorityAfterTimeout>
 800364e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fee0 	bl	800441c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800365c:	f7ff fc84 	bl	8002f68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003662:	4618      	mov	r0, r3
 8003664:	3738      	adds	r7, #56	; 0x38
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e001      	b.n	8003692 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003692:	68fb      	ldr	r3, [r7, #12]
	}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10d      	bne.n	80036da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d14d      	bne.n	8003762 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fe38 	bl	8004340 <xTaskPriorityDisinherit>
 80036d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	e043      	b.n	8003762 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d119      	bne.n	8003714 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6858      	ldr	r0, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	461a      	mov	r2, r3
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	f001 fa9e 	bl	8004c2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	441a      	add	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	d32b      	bcc.n	8003762 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	e026      	b.n	8003762 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68d8      	ldr	r0, [r3, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	461a      	mov	r2, r3
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	f001 fa84 	bl	8004c2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	425b      	negs	r3, r3
 800372e:	441a      	add	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d207      	bcs.n	8003750 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	425b      	negs	r3, r3
 800374a:	441a      	add	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d105      	bne.n	8003762 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3b01      	subs	r3, #1
 8003760:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800376a:	697b      	ldr	r3, [r7, #20]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800377c:	f7ff fbc4 	bl	8002f08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003786:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003788:	e011      	b.n	80037ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d012      	beq.n	80037b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3324      	adds	r3, #36	; 0x24
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fbcc 	bl	8003f34 <xTaskRemoveFromEventList>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037a2:	f000 fca3 	bl	80040ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	dce9      	bgt.n	800378a <prvUnlockQueue+0x16>
 80037b6:	e000      	b.n	80037ba <prvUnlockQueue+0x46>
					break;
 80037b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	22ff      	movs	r2, #255	; 0xff
 80037be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037c2:	f7ff fbd1 	bl	8002f68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037c6:	f7ff fb9f 	bl	8002f08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037d2:	e011      	b.n	80037f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d012      	beq.n	8003802 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3310      	adds	r3, #16
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fba7 	bl	8003f34 <xTaskRemoveFromEventList>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037ec:	f000 fc7e 	bl	80040ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037f0:	7bbb      	ldrb	r3, [r7, #14]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	dce9      	bgt.n	80037d4 <prvUnlockQueue+0x60>
 8003800:	e000      	b.n	8003804 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003802:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	22ff      	movs	r2, #255	; 0xff
 8003808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800380c:	f7ff fbac 	bl	8002f68 <vPortExitCritical>
}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003820:	f7ff fb72 	bl	8002f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800382c:	2301      	movs	r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e001      	b.n	8003836 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003836:	f7ff fb97 	bl	8002f68 <vPortExitCritical>

	return xReturn;
 800383a:	68fb      	ldr	r3, [r7, #12]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800384c:	f7ff fb5c 	bl	8002f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	429a      	cmp	r2, r3
 800385a:	d102      	bne.n	8003862 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800385c:	2301      	movs	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e001      	b.n	8003866 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003866:	f7ff fb7f 	bl	8002f68 <vPortExitCritical>

	return xReturn;
 800386a:	68fb      	ldr	r3, [r7, #12]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08c      	sub	sp, #48	; 0x30
 8003878:	af04      	add	r7, sp, #16
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f827 	bl	80028dc <pvPortMalloc>
 800388e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00e      	beq.n	80038b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003896:	205c      	movs	r0, #92	; 0x5c
 8003898:	f7ff f820 	bl	80028dc <pvPortMalloc>
 800389c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
 80038aa:	e005      	b.n	80038b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038ac:	6978      	ldr	r0, [r7, #20]
 80038ae:	f7ff f8e1 	bl	8002a74 <vPortFree>
 80038b2:	e001      	b.n	80038b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9303      	str	r3, [sp, #12]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	9302      	str	r3, [sp, #8]
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f80e 	bl	80038fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038e2:	69f8      	ldr	r0, [r7, #28]
 80038e4:	f000 f89a 	bl	8003a1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038e8:	2301      	movs	r3, #1
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	e002      	b.n	80038f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038f4:	69bb      	ldr	r3, [r7, #24]
	}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b088      	sub	sp, #32
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	461a      	mov	r2, r3
 8003916:	21a5      	movs	r1, #165	; 0xa5
 8003918:	f001 f954 	bl	8004bc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003926:	3b01      	subs	r3, #1
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f023 0307 	bic.w	r3, r3, #7
 8003934:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	617b      	str	r3, [r7, #20]
}
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01f      	beq.n	800399c <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	e012      	b.n	8003988 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	4413      	add	r3, r2
 8003968:	7819      	ldrb	r1, [r3, #0]
 800396a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	3334      	adds	r3, #52	; 0x34
 8003972:	460a      	mov	r2, r1
 8003974:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	4413      	add	r3, r2
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d006      	beq.n	8003990 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3301      	adds	r3, #1
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d9e9      	bls.n	8003962 <prvInitialiseNewTask+0x64>
 800398e:	e000      	b.n	8003992 <prvInitialiseNewTask+0x94>
			{
				break;
 8003990:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800399a:	e003      	b.n	80039a4 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	2b37      	cmp	r3, #55	; 0x37
 80039a8:	d901      	bls.n	80039ae <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039aa:	2337      	movs	r3, #55	; 0x37
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	2200      	movs	r2, #0
 80039be:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	3304      	adds	r3, #4
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff f993 	bl	8002cf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	3318      	adds	r3, #24
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff f98e 	bl	8002cf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	2200      	movs	r2, #0
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	69b8      	ldr	r0, [r7, #24]
 80039fe:	f7ff fa0b 	bl	8002e18 <pxPortInitialiseStack>
 8003a02:	4602      	mov	r2, r0
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a14:	bf00      	nop
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a24:	f7ff fa70 	bl	8002f08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a28:	4b2d      	ldr	r3, [pc, #180]	; (8003ae0 <prvAddNewTaskToReadyList+0xc4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <prvAddNewTaskToReadyList+0xc4>)
 8003a30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a32:	4b2c      	ldr	r3, [pc, #176]	; (8003ae4 <prvAddNewTaskToReadyList+0xc8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ae4 <prvAddNewTaskToReadyList+0xc8>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a40:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <prvAddNewTaskToReadyList+0xc4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d110      	bne.n	8003a6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a48:	f000 fb5c 	bl	8004104 <prvInitialiseTaskLists>
 8003a4c:	e00d      	b.n	8003a6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a4e:	4b26      	ldr	r3, [pc, #152]	; (8003ae8 <prvAddNewTaskToReadyList+0xcc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <prvAddNewTaskToReadyList+0xc8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d802      	bhi.n	8003a6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a64:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <prvAddNewTaskToReadyList+0xc8>)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <prvAddNewTaskToReadyList+0xd0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <prvAddNewTaskToReadyList+0xd0>)
 8003a72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <prvAddNewTaskToReadyList+0xd0>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <prvAddNewTaskToReadyList+0xd4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d903      	bls.n	8003a90 <prvAddNewTaskToReadyList+0x74>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <prvAddNewTaskToReadyList+0xd4>)
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <prvAddNewTaskToReadyList+0xd8>)
 8003a9e:	441a      	add	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f7ff f92f 	bl	8002d0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003aac:	f7ff fa5c 	bl	8002f68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <prvAddNewTaskToReadyList+0xcc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <prvAddNewTaskToReadyList+0xc8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d207      	bcs.n	8003ad6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <prvAddNewTaskToReadyList+0xdc>)
 8003ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20004210 	.word	0x20004210
 8003ae4:	20003d40 	.word	0x20003d40
 8003ae8:	2000421c 	.word	0x2000421c
 8003aec:	2000422c 	.word	0x2000422c
 8003af0:	20004218 	.word	0x20004218
 8003af4:	20003d44 	.word	0x20003d44
 8003af8:	e000ed04 	.word	0xe000ed04

08003afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d017      	beq.n	8003b3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <vTaskDelay+0x60>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <vTaskDelay+0x30>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	60bb      	str	r3, [r7, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b2c:	f000 f81a 	bl	8003b64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b30:	2100      	movs	r1, #0
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fd08 	bl	8004548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b38:	f000 f822 	bl	8003b80 <xTaskResumeAll>
 8003b3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d107      	bne.n	8003b54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <vTaskDelay+0x64>)
 8003b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20004234 	.word	0x20004234
 8003b60:	e000ed04 	.word	0xe000ed04

08003b64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b68:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <vTaskSuspendAll+0x18>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	4a03      	ldr	r2, [pc, #12]	; (8003b7c <vTaskSuspendAll+0x18>)
 8003b70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b72:	bf00      	nop
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	20004234 	.word	0x20004234

08003b80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b8e:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <xTaskResumeAll+0x118>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <xTaskResumeAll+0x2c>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	603b      	str	r3, [r7, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bac:	f7ff f9ac 	bl	8002f08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bb0:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <xTaskResumeAll+0x118>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	4a38      	ldr	r2, [pc, #224]	; (8003c98 <xTaskResumeAll+0x118>)
 8003bb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bba:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <xTaskResumeAll+0x118>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d162      	bne.n	8003c88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bc2:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <xTaskResumeAll+0x11c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d05e      	beq.n	8003c88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bca:	e02f      	b.n	8003c2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bcc:	4b34      	ldr	r3, [pc, #208]	; (8003ca0 <xTaskResumeAll+0x120>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3318      	adds	r3, #24
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff f8f3 	bl	8002dc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff f8ee 	bl	8002dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <xTaskResumeAll+0x124>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d903      	bls.n	8003bfc <xTaskResumeAll+0x7c>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	4a2a      	ldr	r2, [pc, #168]	; (8003ca4 <xTaskResumeAll+0x124>)
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4a27      	ldr	r2, [pc, #156]	; (8003ca8 <xTaskResumeAll+0x128>)
 8003c0a:	441a      	add	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f7ff f879 	bl	8002d0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	4b23      	ldr	r3, [pc, #140]	; (8003cac <xTaskResumeAll+0x12c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d302      	bcc.n	8003c2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c26:	4b22      	ldr	r3, [pc, #136]	; (8003cb0 <xTaskResumeAll+0x130>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <xTaskResumeAll+0x120>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1cb      	bne.n	8003bcc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c3a:	f000 fadb 	bl	80041f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <xTaskResumeAll+0x134>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d010      	beq.n	8003c6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c4a:	f000 f837 	bl	8003cbc <xTaskIncrementTick>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c54:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <xTaskResumeAll+0x130>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f1      	bne.n	8003c4a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <xTaskResumeAll+0x134>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c6c:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <xTaskResumeAll+0x130>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d009      	beq.n	8003c88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <xTaskResumeAll+0x138>)
 8003c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c88:	f7ff f96e 	bl	8002f68 <vPortExitCritical>

	return xAlreadyYielded;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20004234 	.word	0x20004234
 8003c9c:	20004210 	.word	0x20004210
 8003ca0:	200041d4 	.word	0x200041d4
 8003ca4:	20004218 	.word	0x20004218
 8003ca8:	20003d44 	.word	0x20003d44
 8003cac:	20003d40 	.word	0x20003d40
 8003cb0:	20004224 	.word	0x20004224
 8003cb4:	20004220 	.word	0x20004220
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc6:	4b4f      	ldr	r3, [pc, #316]	; (8003e04 <xTaskIncrementTick+0x148>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 808f 	bne.w	8003dee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cd0:	4b4d      	ldr	r3, [pc, #308]	; (8003e08 <xTaskIncrementTick+0x14c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003cd8:	4a4b      	ldr	r2, [pc, #300]	; (8003e08 <xTaskIncrementTick+0x14c>)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d120      	bne.n	8003d26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ce4:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <xTaskIncrementTick+0x150>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <xTaskIncrementTick+0x48>
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	603b      	str	r3, [r7, #0]
}
 8003d00:	bf00      	nop
 8003d02:	e7fe      	b.n	8003d02 <xTaskIncrementTick+0x46>
 8003d04:	4b41      	ldr	r3, [pc, #260]	; (8003e0c <xTaskIncrementTick+0x150>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <xTaskIncrementTick+0x154>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a3f      	ldr	r2, [pc, #252]	; (8003e0c <xTaskIncrementTick+0x150>)
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4a3f      	ldr	r2, [pc, #252]	; (8003e10 <xTaskIncrementTick+0x154>)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <xTaskIncrementTick+0x158>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	4a3d      	ldr	r2, [pc, #244]	; (8003e14 <xTaskIncrementTick+0x158>)
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	f000 fa67 	bl	80041f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d26:	4b3c      	ldr	r3, [pc, #240]	; (8003e18 <xTaskIncrementTick+0x15c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d349      	bcc.n	8003dc4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d30:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <xTaskIncrementTick+0x150>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d104      	bne.n	8003d44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d3a:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <xTaskIncrementTick+0x15c>)
 8003d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d40:	601a      	str	r2, [r3, #0]
					break;
 8003d42:	e03f      	b.n	8003dc4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d44:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <xTaskIncrementTick+0x150>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d203      	bcs.n	8003d64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d5c:	4a2e      	ldr	r2, [pc, #184]	; (8003e18 <xTaskIncrementTick+0x15c>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d62:	e02f      	b.n	8003dc4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff f82b 	bl	8002dc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d004      	beq.n	8003d80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3318      	adds	r3, #24
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff f822 	bl	8002dc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <xTaskIncrementTick+0x160>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d903      	bls.n	8003d94 <xTaskIncrementTick+0xd8>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4a22      	ldr	r2, [pc, #136]	; (8003e1c <xTaskIncrementTick+0x160>)
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4a1f      	ldr	r2, [pc, #124]	; (8003e20 <xTaskIncrementTick+0x164>)
 8003da2:	441a      	add	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	3304      	adds	r3, #4
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f7fe ffad 	bl	8002d0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <xTaskIncrementTick+0x168>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d3b8      	bcc.n	8003d30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dc2:	e7b5      	b.n	8003d30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dc4:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <xTaskIncrementTick+0x168>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dca:	4915      	ldr	r1, [pc, #84]	; (8003e20 <xTaskIncrementTick+0x164>)
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d901      	bls.n	8003de0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <xTaskIncrementTick+0x16c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e004      	b.n	8003df8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <xTaskIncrementTick+0x170>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <xTaskIncrementTick+0x170>)
 8003df6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003df8:	697b      	ldr	r3, [r7, #20]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20004234 	.word	0x20004234
 8003e08:	20004214 	.word	0x20004214
 8003e0c:	200041cc 	.word	0x200041cc
 8003e10:	200041d0 	.word	0x200041d0
 8003e14:	20004228 	.word	0x20004228
 8003e18:	20004230 	.word	0x20004230
 8003e1c:	20004218 	.word	0x20004218
 8003e20:	20003d44 	.word	0x20003d44
 8003e24:	20003d40 	.word	0x20003d40
 8003e28:	20004224 	.word	0x20004224
 8003e2c:	20004220 	.word	0x20004220

08003e30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e36:	4b28      	ldr	r3, [pc, #160]	; (8003ed8 <vTaskSwitchContext+0xa8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e3e:	4b27      	ldr	r3, [pc, #156]	; (8003edc <vTaskSwitchContext+0xac>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e44:	e041      	b.n	8003eca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003e46:	4b25      	ldr	r3, [pc, #148]	; (8003edc <vTaskSwitchContext+0xac>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e4c:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <vTaskSwitchContext+0xb0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	e010      	b.n	8003e76 <vTaskSwitchContext+0x46>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <vTaskSwitchContext+0x40>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	607b      	str	r3, [r7, #4]
}
 8003e6c:	bf00      	nop
 8003e6e:	e7fe      	b.n	8003e6e <vTaskSwitchContext+0x3e>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	491b      	ldr	r1, [pc, #108]	; (8003ee4 <vTaskSwitchContext+0xb4>)
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0e4      	beq.n	8003e54 <vTaskSwitchContext+0x24>
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <vTaskSwitchContext+0xb4>)
 8003e96:	4413      	add	r3, r2
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d104      	bne.n	8003eba <vTaskSwitchContext+0x8a>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <vTaskSwitchContext+0xb8>)
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	4a06      	ldr	r2, [pc, #24]	; (8003ee0 <vTaskSwitchContext+0xb0>)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6013      	str	r3, [r2, #0]
}
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20004234 	.word	0x20004234
 8003edc:	20004224 	.word	0x20004224
 8003ee0:	20004218 	.word	0x20004218
 8003ee4:	20003d44 	.word	0x20003d44
 8003ee8:	20003d40 	.word	0x20003d40

08003eec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	60fb      	str	r3, [r7, #12]
}
 8003f0e:	bf00      	nop
 8003f10:	e7fe      	b.n	8003f10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <vTaskPlaceOnEventList+0x44>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3318      	adds	r3, #24
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fe ff19 	bl	8002d52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f20:	2101      	movs	r1, #1
 8003f22:	6838      	ldr	r0, [r7, #0]
 8003f24:	f000 fb10 	bl	8004548 <prvAddCurrentTaskToDelayedList>
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20003d40 	.word	0x20003d40

08003f34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10a      	bne.n	8003f60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	60fb      	str	r3, [r7, #12]
}
 8003f5c:	bf00      	nop
 8003f5e:	e7fe      	b.n	8003f5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	3318      	adds	r3, #24
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe ff2d 	bl	8002dc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <xTaskRemoveFromEventList+0xb0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d11d      	bne.n	8003fae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe ff24 	bl	8002dc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f80:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <xTaskRemoveFromEventList+0xb4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d903      	bls.n	8003f90 <xTaskRemoveFromEventList+0x5c>
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <xTaskRemoveFromEventList+0xb4>)
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4a13      	ldr	r2, [pc, #76]	; (8003fec <xTaskRemoveFromEventList+0xb8>)
 8003f9e:	441a      	add	r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f7fe feaf 	bl	8002d0a <vListInsertEnd>
 8003fac:	e005      	b.n	8003fba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3318      	adds	r3, #24
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	480e      	ldr	r0, [pc, #56]	; (8003ff0 <xTaskRemoveFromEventList+0xbc>)
 8003fb6:	f7fe fea8 	bl	8002d0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <xTaskRemoveFromEventList+0xc0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d905      	bls.n	8003fd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <xTaskRemoveFromEventList+0xc4>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e001      	b.n	8003fd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fd8:	697b      	ldr	r3, [r7, #20]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20004234 	.word	0x20004234
 8003fe8:	20004218 	.word	0x20004218
 8003fec:	20003d44 	.word	0x20003d44
 8003ff0:	200041d4 	.word	0x200041d4
 8003ff4:	20003d40 	.word	0x20003d40
 8003ff8:	20004224 	.word	0x20004224

08003ffc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <vTaskInternalSetTimeOutState+0x24>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <vTaskInternalSetTimeOutState+0x28>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	605a      	str	r2, [r3, #4]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	20004228 	.word	0x20004228
 8004024:	20004214 	.word	0x20004214

08004028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	613b      	str	r3, [r7, #16]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	60fb      	str	r3, [r7, #12]
}
 8004066:	bf00      	nop
 8004068:	e7fe      	b.n	8004068 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800406a:	f7fe ff4d 	bl	8002f08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800406e:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <xTaskCheckForTimeOut+0xbc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004086:	d102      	bne.n	800408e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	e023      	b.n	80040d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <xTaskCheckForTimeOut+0xc0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d007      	beq.n	80040aa <xTaskCheckForTimeOut+0x82>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d302      	bcc.n	80040aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040a4:	2301      	movs	r3, #1
 80040a6:	61fb      	str	r3, [r7, #28]
 80040a8:	e015      	b.n	80040d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d20b      	bcs.n	80040cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	1ad2      	subs	r2, r2, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff9b 	bl	8003ffc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	e004      	b.n	80040d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040d2:	2301      	movs	r3, #1
 80040d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040d6:	f7fe ff47 	bl	8002f68 <vPortExitCritical>

	return xReturn;
 80040da:	69fb      	ldr	r3, [r7, #28]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20004214 	.word	0x20004214
 80040e8:	20004228 	.word	0x20004228

080040ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <vTaskMissedYield+0x14>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
}
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	20004224 	.word	0x20004224

08004104 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	e00c      	b.n	800412a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4a12      	ldr	r2, [pc, #72]	; (8004164 <prvInitialiseTaskLists+0x60>)
 800411c:	4413      	add	r3, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe fdc6 	bl	8002cb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3301      	adds	r3, #1
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b37      	cmp	r3, #55	; 0x37
 800412e:	d9ef      	bls.n	8004110 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004130:	480d      	ldr	r0, [pc, #52]	; (8004168 <prvInitialiseTaskLists+0x64>)
 8004132:	f7fe fdbd 	bl	8002cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004136:	480d      	ldr	r0, [pc, #52]	; (800416c <prvInitialiseTaskLists+0x68>)
 8004138:	f7fe fdba 	bl	8002cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800413c:	480c      	ldr	r0, [pc, #48]	; (8004170 <prvInitialiseTaskLists+0x6c>)
 800413e:	f7fe fdb7 	bl	8002cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004142:	480c      	ldr	r0, [pc, #48]	; (8004174 <prvInitialiseTaskLists+0x70>)
 8004144:	f7fe fdb4 	bl	8002cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004148:	480b      	ldr	r0, [pc, #44]	; (8004178 <prvInitialiseTaskLists+0x74>)
 800414a:	f7fe fdb1 	bl	8002cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <prvInitialiseTaskLists+0x78>)
 8004150:	4a05      	ldr	r2, [pc, #20]	; (8004168 <prvInitialiseTaskLists+0x64>)
 8004152:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <prvInitialiseTaskLists+0x7c>)
 8004156:	4a05      	ldr	r2, [pc, #20]	; (800416c <prvInitialiseTaskLists+0x68>)
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20003d44 	.word	0x20003d44
 8004168:	200041a4 	.word	0x200041a4
 800416c:	200041b8 	.word	0x200041b8
 8004170:	200041d4 	.word	0x200041d4
 8004174:	200041e8 	.word	0x200041e8
 8004178:	200041fc 	.word	0x200041fc
 800417c:	200041cc 	.word	0x200041cc
 8004180:	200041d0 	.word	0x200041d0

08004184 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004190:	e005      	b.n	800419e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3301      	adds	r3, #1
 8004196:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3301      	adds	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2ba5      	cmp	r3, #165	; 0xa5
 80041a4:	d0f5      	beq.n	8004192 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	089b      	lsrs	r3, r3, #2
 80041aa:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	b29b      	uxth	r3, r3
	}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <uxTaskGetStackHighWaterMark+0x14>
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <uxTaskGetStackHighWaterMark+0x34>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	e000      	b.n	80041d2 <uxTaskGetStackHighWaterMark+0x16>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80041da:	6938      	ldr	r0, [r7, #16]
 80041dc:	f7ff ffd2 	bl	8004184 <prvTaskCheckFreeStackSpace>
 80041e0:	4603      	mov	r3, r0
 80041e2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80041e4:	68fb      	ldr	r3, [r7, #12]
	}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20003d40 	.word	0x20003d40

080041f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <prvResetNextTaskUnblockTime+0x38>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d104      	bne.n	800420e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <prvResetNextTaskUnblockTime+0x3c>)
 8004206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800420a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800420c:	e008      	b.n	8004220 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <prvResetNextTaskUnblockTime+0x38>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <prvResetNextTaskUnblockTime+0x3c>)
 800421e:	6013      	str	r3, [r2, #0]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	200041cc 	.word	0x200041cc
 8004230:	20004230 	.word	0x20004230

08004234 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800423a:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <xTaskGetSchedulerState+0x34>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004242:	2301      	movs	r3, #1
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	e008      	b.n	800425a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004248:	4b08      	ldr	r3, [pc, #32]	; (800426c <xTaskGetSchedulerState+0x38>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004250:	2302      	movs	r3, #2
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	e001      	b.n	800425a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800425a:	687b      	ldr	r3, [r7, #4]
	}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	2000421c 	.word	0x2000421c
 800426c:	20004234 	.word	0x20004234

08004270 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d051      	beq.n	800432a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428a:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <xTaskPriorityInherit+0xc4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	429a      	cmp	r2, r3
 8004292:	d241      	bcs.n	8004318 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b00      	cmp	r3, #0
 800429a:	db06      	blt.n	80042aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <xTaskPriorityInherit+0xc4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6959      	ldr	r1, [r3, #20]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <xTaskPriorityInherit+0xc8>)
 80042bc:	4413      	add	r3, r2
 80042be:	4299      	cmp	r1, r3
 80042c0:	d122      	bne.n	8004308 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3304      	adds	r3, #4
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fd7c 	bl	8002dc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042cc:	4b19      	ldr	r3, [pc, #100]	; (8004334 <xTaskPriorityInherit+0xc4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	4b18      	ldr	r3, [pc, #96]	; (800433c <xTaskPriorityInherit+0xcc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d903      	bls.n	80042ea <xTaskPriorityInherit+0x7a>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	4a15      	ldr	r2, [pc, #84]	; (800433c <xTaskPriorityInherit+0xcc>)
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4a10      	ldr	r2, [pc, #64]	; (8004338 <xTaskPriorityInherit+0xc8>)
 80042f8:	441a      	add	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	3304      	adds	r3, #4
 80042fe:	4619      	mov	r1, r3
 8004300:	4610      	mov	r0, r2
 8004302:	f7fe fd02 	bl	8002d0a <vListInsertEnd>
 8004306:	e004      	b.n	8004312 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <xTaskPriorityInherit+0xc4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004312:	2301      	movs	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	e008      	b.n	800432a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <xTaskPriorityInherit+0xc4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	429a      	cmp	r2, r3
 8004324:	d201      	bcs.n	800432a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004326:	2301      	movs	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800432a:	68fb      	ldr	r3, [r7, #12]
	}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20003d40 	.word	0x20003d40
 8004338:	20003d44 	.word	0x20003d44
 800433c:	20004218 	.word	0x20004218

08004340 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d056      	beq.n	8004404 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004356:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <xTaskPriorityDisinherit+0xd0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	429a      	cmp	r2, r3
 800435e:	d00a      	beq.n	8004376 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	60fb      	str	r3, [r7, #12]
}
 8004372:	bf00      	nop
 8004374:	e7fe      	b.n	8004374 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	60bb      	str	r3, [r7, #8]
}
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004398:	1e5a      	subs	r2, r3, #1
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d02c      	beq.n	8004404 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d128      	bne.n	8004404 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe fd04 	bl	8002dc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <xTaskPriorityDisinherit+0xd4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d903      	bls.n	80043e4 <xTaskPriorityDisinherit+0xa4>
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	4a0c      	ldr	r2, [pc, #48]	; (8004414 <xTaskPriorityDisinherit+0xd4>)
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4a09      	ldr	r2, [pc, #36]	; (8004418 <xTaskPriorityDisinherit+0xd8>)
 80043f2:	441a      	add	r2, r3
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	3304      	adds	r3, #4
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f7fe fc85 	bl	8002d0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004400:	2301      	movs	r3, #1
 8004402:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004404:	697b      	ldr	r3, [r7, #20]
	}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20003d40 	.word	0x20003d40
 8004414:	20004218 	.word	0x20004218
 8004418:	20003d44 	.word	0x20003d44

0800441c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800442a:	2301      	movs	r3, #1
 800442c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d06a      	beq.n	800450a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60fb      	str	r3, [r7, #12]
}
 800444e:	bf00      	nop
 8004450:	e7fe      	b.n	8004450 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d902      	bls.n	8004462 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	e002      	b.n	8004468 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004466:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	429a      	cmp	r2, r3
 8004470:	d04b      	beq.n	800450a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	429a      	cmp	r2, r3
 800447a:	d146      	bne.n	800450a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800447c:	4b25      	ldr	r3, [pc, #148]	; (8004514 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	429a      	cmp	r2, r3
 8004484:	d10a      	bne.n	800449c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60bb      	str	r3, [r7, #8]
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	db04      	blt.n	80044ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	6959      	ldr	r1, [r3, #20]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4a13      	ldr	r2, [pc, #76]	; (8004518 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80044ca:	4413      	add	r3, r2
 80044cc:	4299      	cmp	r1, r3
 80044ce:	d11c      	bne.n	800450a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	3304      	adds	r3, #4
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe fc75 	bl	8002dc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d903      	bls.n	80044ee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	4a0c      	ldr	r2, [pc, #48]	; (800451c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4a07      	ldr	r2, [pc, #28]	; (8004518 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80044fc:	441a      	add	r2, r3
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	3304      	adds	r3, #4
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f7fe fc00 	bl	8002d0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800450a:	bf00      	nop
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20003d40 	.word	0x20003d40
 8004518:	20003d44 	.word	0x20003d44
 800451c:	20004218 	.word	0x20004218

08004520 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <pvTaskIncrementMutexHeldCount+0x24>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d004      	beq.n	8004536 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <pvTaskIncrementMutexHeldCount+0x24>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004532:	3201      	adds	r2, #1
 8004534:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004536:	4b03      	ldr	r3, [pc, #12]	; (8004544 <pvTaskIncrementMutexHeldCount+0x24>)
 8004538:	681b      	ldr	r3, [r3, #0]
	}
 800453a:	4618      	mov	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	20003d40 	.word	0x20003d40

08004548 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004552:	4b21      	ldr	r3, [pc, #132]	; (80045d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004558:	4b20      	ldr	r3, [pc, #128]	; (80045dc <prvAddCurrentTaskToDelayedList+0x94>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3304      	adds	r3, #4
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe fc30 	bl	8002dc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800456a:	d10a      	bne.n	8004582 <prvAddCurrentTaskToDelayedList+0x3a>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004572:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <prvAddCurrentTaskToDelayedList+0x94>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3304      	adds	r3, #4
 8004578:	4619      	mov	r1, r3
 800457a:	4819      	ldr	r0, [pc, #100]	; (80045e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800457c:	f7fe fbc5 	bl	8002d0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004580:	e026      	b.n	80045d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4413      	add	r3, r2
 8004588:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800458a:	4b14      	ldr	r3, [pc, #80]	; (80045dc <prvAddCurrentTaskToDelayedList+0x94>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	429a      	cmp	r2, r3
 8004598:	d209      	bcs.n	80045ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <prvAddCurrentTaskToDelayedList+0x94>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f7fe fbd3 	bl	8002d52 <vListInsert>
}
 80045ac:	e010      	b.n	80045d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ae:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <prvAddCurrentTaskToDelayedList+0x94>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f7fe fbc9 	bl	8002d52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d202      	bcs.n	80045d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045ca:	4a08      	ldr	r2, [pc, #32]	; (80045ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6013      	str	r3, [r2, #0]
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	20004214 	.word	0x20004214
 80045dc:	20003d40 	.word	0x20003d40
 80045e0:	200041fc 	.word	0x200041fc
 80045e4:	200041d0 	.word	0x200041d0
 80045e8:	200041cc 	.word	0x200041cc
 80045ec:	20004230 	.word	0x20004230

080045f0 <seto_blink_led_state>:
// OUTPUTS AS EXAMPLES OF SETTER AND GETTER METHODS
static uint8_t blink_led_state;
static SemaphoreHandle_t mutex_blink_led_state;

// Set
static void seto_blink_led_state(const uint8_t *pLedState) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  if (xSemaphoreTake(mutex_blink_led_state, 100 / portTICK_PERIOD_MS) ==
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <seto_blink_led_state+0x38>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2164      	movs	r1, #100	; 0x64
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe ff2a 	bl	8003458 <xQueueSemaphoreTake>
 8004604:	4603      	mov	r3, r0
 8004606:	2b01      	cmp	r3, #1
 8004608:	d10a      	bne.n	8004620 <seto_blink_led_state+0x30>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	781a      	ldrb	r2, [r3, #0]
      pdTRUE) {
    memcpy(&blink_led_state, pLedState, 1);
 800460e:	4b07      	ldr	r3, [pc, #28]	; (800462c <seto_blink_led_state+0x3c>)
 8004610:	701a      	strb	r2, [r3, #0]
    xSemaphoreGive(mutex_blink_led_state);
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <seto_blink_led_state+0x38>)
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	2300      	movs	r3, #0
 8004618:	2200      	movs	r2, #0
 800461a:	2100      	movs	r1, #0
 800461c:	f7fe fe1e 	bl	800325c <xQueueGenericSend>
  }
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	2000423c 	.word	0x2000423c
 800462c:	20004238 	.word	0x20004238

08004630 <geto_blink_led_state>:

// Get
void geto_blink_led_state(uint8_t *pLedState) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  // Returns a copy of the output
  if (xSemaphoreTake(mutex_blink_led_state, 100 / portTICK_PERIOD_MS) ==
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <geto_blink_led_state+0x38>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2164      	movs	r1, #100	; 0x64
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe ff0a 	bl	8003458 <xQueueSemaphoreTake>
 8004644:	4603      	mov	r3, r0
 8004646:	2b01      	cmp	r3, #1
 8004648:	d10a      	bne.n	8004660 <geto_blink_led_state+0x30>
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <geto_blink_led_state+0x3c>)
 800464c:	781a      	ldrb	r2, [r3, #0]
      pdTRUE) {
    memcpy(pLedState, &blink_led_state, 1);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	701a      	strb	r2, [r3, #0]
    xSemaphoreGive(mutex_blink_led_state);
 8004652:	4b05      	ldr	r3, [pc, #20]	; (8004668 <geto_blink_led_state+0x38>)
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	2300      	movs	r3, #0
 8004658:	2200      	movs	r2, #0
 800465a:	2100      	movs	r1, #0
 800465c:	f7fe fdfe 	bl	800325c <xQueueGenericSend>
  }
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	2000423c 	.word	0x2000423c
 800466c:	20004238 	.word	0x20004238

08004670 <blink_init>:

// Init
void blink_init(void) {
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  blink_led_state = 0;
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <blink_init+0x1c>)
 8004676:	2200      	movs	r2, #0
 8004678:	701a      	strb	r2, [r3, #0]
  mutex_blink_led_state = xSemaphoreCreateMutex();
 800467a:	2001      	movs	r0, #1
 800467c:	f7fe fdd5 	bl	800322a <xQueueCreateMutex>
 8004680:	4603      	mov	r3, r0
 8004682:	4a03      	ldr	r2, [pc, #12]	; (8004690 <blink_init+0x20>)
 8004684:	6013      	str	r3, [r2, #0]
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20004238 	.word	0x20004238
 8004690:	2000423c 	.word	0x2000423c

08004694 <blink_main>:

// ------- Actual function starts here! -------------
void blink_main() {
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  // send something every MAX_COUNT*TASK_PERIOD seconds.
  static uint8_t led_state = 1;
  if (led_state == 0) {
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <blink_main+0x30>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <blink_main+0x14>
    led_state = 1;
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <blink_main+0x30>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	e002      	b.n	80046ae <blink_main+0x1a>
  } else {
    led_state = 0;
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <blink_main+0x30>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	701a      	strb	r2, [r3, #0]
  }

  // OUTPUT
  seto_blink_led_state(&led_state);
 80046ae:	4805      	ldr	r0, [pc, #20]	; (80046c4 <blink_main+0x30>)
 80046b0:	f7ff ff9e 	bl	80045f0 <seto_blink_led_state>
  pinout_builtin_led(led_state);
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <blink_main+0x30>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fc f8d4 	bl	8000866 <pinout_builtin_led>
}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000010 	.word	0x20000010

080046c8 <seto_debug_task_1000ms_watermark>:

static size_t debug_task200ms_watermark;
static SemaphoreHandle_t mutex_debug_task200ms_watermark;

// Set
static void seto_debug_task_1000ms_watermark(const size_t *pWatermark) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  if (xSemaphoreTake(mutex_debug_task1000ms_watermark,
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <seto_debug_task_1000ms_watermark+0x38>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2164      	movs	r1, #100	; 0x64
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe febe 	bl	8003458 <xQueueSemaphoreTake>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d10a      	bne.n	80046f8 <seto_debug_task_1000ms_watermark+0x30>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	781a      	ldrb	r2, [r3, #0]
                     100 / portTICK_PERIOD_MS) == pdTRUE) {
    memcpy(&debug_task1000ms_watermark, pWatermark, 1);
 80046e6:	4b07      	ldr	r3, [pc, #28]	; (8004704 <seto_debug_task_1000ms_watermark+0x3c>)
 80046e8:	701a      	strb	r2, [r3, #0]
    xSemaphoreGive(mutex_debug_task1000ms_watermark);
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <seto_debug_task_1000ms_watermark+0x38>)
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	2300      	movs	r3, #0
 80046f0:	2200      	movs	r2, #0
 80046f2:	2100      	movs	r1, #0
 80046f4:	f7fe fdb2 	bl	800325c <xQueueGenericSend>
  }
}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20004244 	.word	0x20004244
 8004704:	20004240 	.word	0x20004240

08004708 <seto_debug_task_200ms_watermark>:

static void seto_debug_task_200ms_watermark(const size_t *pWatermark) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if (xSemaphoreTake(mutex_debug_task1000ms_watermark,
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <seto_debug_task_200ms_watermark+0x38>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2164      	movs	r1, #100	; 0x64
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fe9e 	bl	8003458 <xQueueSemaphoreTake>
 800471c:	4603      	mov	r3, r0
 800471e:	2b01      	cmp	r3, #1
 8004720:	d10a      	bne.n	8004738 <seto_debug_task_200ms_watermark+0x30>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	781a      	ldrb	r2, [r3, #0]
                     100 / portTICK_PERIOD_MS) == pdTRUE) {
    memcpy(&debug_task200ms_watermark, pWatermark, 1);
 8004726:	4b07      	ldr	r3, [pc, #28]	; (8004744 <seto_debug_task_200ms_watermark+0x3c>)
 8004728:	701a      	strb	r2, [r3, #0]
    xSemaphoreGive(mutex_debug_task200ms_watermark);
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <seto_debug_task_200ms_watermark+0x40>)
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	2300      	movs	r3, #0
 8004730:	2200      	movs	r2, #0
 8004732:	2100      	movs	r1, #0
 8004734:	f7fe fd92 	bl	800325c <xQueueGenericSend>
  }
}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	20004244 	.word	0x20004244
 8004744:	20004248 	.word	0x20004248
 8004748:	2000424c 	.word	0x2000424c

0800474c <geto_debug_task_1000ms_watermark>:

// Get
void geto_debug_task_1000ms_watermark(size_t *pWatermark) {
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  // Returns a copy of the output
  if (xSemaphoreTake(mutex_debug_task1000ms_watermark,
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <geto_debug_task_1000ms_watermark+0x38>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2164      	movs	r1, #100	; 0x64
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe fe7c 	bl	8003458 <xQueueSemaphoreTake>
 8004760:	4603      	mov	r3, r0
 8004762:	2b01      	cmp	r3, #1
 8004764:	d10a      	bne.n	800477c <geto_debug_task_1000ms_watermark+0x30>
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <geto_debug_task_1000ms_watermark+0x3c>)
 8004768:	781a      	ldrb	r2, [r3, #0]
                     100 / portTICK_PERIOD_MS) == pdTRUE) {
    memcpy(pWatermark, &debug_task1000ms_watermark, 1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	701a      	strb	r2, [r3, #0]
    xSemaphoreGive(mutex_debug_task1000ms_watermark);
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <geto_debug_task_1000ms_watermark+0x38>)
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	2200      	movs	r2, #0
 8004776:	2100      	movs	r1, #0
 8004778:	f7fe fd70 	bl	800325c <xQueueGenericSend>
  }
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20004244 	.word	0x20004244
 8004788:	20004240 	.word	0x20004240

0800478c <geto_debug_task_200ms_watermark>:

// Get
void geto_debug_task_200ms_watermark(size_t *pWatermark) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  // Returns a copy of the output
  if (xSemaphoreTake(mutex_debug_task200ms_watermark,
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <geto_debug_task_200ms_watermark+0x38>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2164      	movs	r1, #100	; 0x64
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe fe5c 	bl	8003458 <xQueueSemaphoreTake>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d10a      	bne.n	80047bc <geto_debug_task_200ms_watermark+0x30>
 80047a6:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <geto_debug_task_200ms_watermark+0x3c>)
 80047a8:	781a      	ldrb	r2, [r3, #0]
                     100 / portTICK_PERIOD_MS) == pdTRUE) {
    memcpy(pWatermark, &debug_task200ms_watermark, 1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	701a      	strb	r2, [r3, #0]
    xSemaphoreGive(mutex_debug_task200ms_watermark);
 80047ae:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <geto_debug_task_200ms_watermark+0x38>)
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	2300      	movs	r3, #0
 80047b4:	2200      	movs	r2, #0
 80047b6:	2100      	movs	r1, #0
 80047b8:	f7fe fd50 	bl	800325c <xQueueGenericSend>
  }
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	2000424c 	.word	0x2000424c
 80047c8:	20004248 	.word	0x20004248

080047cc <debug_init>:

// Init
void debug_init(void) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  debug_task1000ms_watermark = 0;
 80047d0:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <debug_init+0x2c>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
  debug_task200ms_watermark = 0;
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <debug_init+0x30>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
  mutex_debug_task1000ms_watermark = xSemaphoreCreateMutex();
 80047dc:	2001      	movs	r0, #1
 80047de:	f7fe fd24 	bl	800322a <xQueueCreateMutex>
 80047e2:	4603      	mov	r3, r0
 80047e4:	4a06      	ldr	r2, [pc, #24]	; (8004800 <debug_init+0x34>)
 80047e6:	6013      	str	r3, [r2, #0]
  mutex_debug_task200ms_watermark = xSemaphoreCreateMutex();
 80047e8:	2001      	movs	r0, #1
 80047ea:	f7fe fd1e 	bl	800322a <xQueueCreateMutex>
 80047ee:	4603      	mov	r3, r0
 80047f0:	4a04      	ldr	r2, [pc, #16]	; (8004804 <debug_init+0x38>)
 80047f2:	6013      	str	r3, [r2, #0]
}
 80047f4:	bf00      	nop
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20004240 	.word	0x20004240
 80047fc:	20004248 	.word	0x20004248
 8004800:	20004244 	.word	0x20004244
 8004804:	2000424c 	.word	0x2000424c

08004808 <debug_main>:

// ------- Actual function starts here! -------------
void debug_main() {
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0

  size_t task_200ms_watermark;
  task_200ms_watermark = uxTaskGetStackHighWaterMark(xTaskHandle_200ms);
 800480e:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <debug_main+0x3c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fcd2 	bl	80041bc <uxTaskGetStackHighWaterMark>
 8004818:	4603      	mov	r3, r0
 800481a:	607b      	str	r3, [r7, #4]
  size_t task_1000ms_watermark;
  task_1000ms_watermark = uxTaskGetStackHighWaterMark(xTaskHandle_1000ms);
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <debug_main+0x40>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fccb 	bl	80041bc <uxTaskGetStackHighWaterMark>
 8004826:	4603      	mov	r3, r0
 8004828:	603b      	str	r3, [r7, #0]

  // OUTPUT
  seto_debug_task_1000ms_watermark(&task_1000ms_watermark);
 800482a:	463b      	mov	r3, r7
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ff4b 	bl	80046c8 <seto_debug_task_1000ms_watermark>
  seto_debug_task_200ms_watermark(&task_200ms_watermark);
 8004832:	1d3b      	adds	r3, r7, #4
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff67 	bl	8004708 <seto_debug_task_200ms_watermark>
}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000118 	.word	0x20000118
 8004848:	20000114 	.word	0x20000114

0800484c <seto_pv_voltage>:
// OUTPUTS AS EXAMPLES OF SETTER AND GETTER METHODS
static float pv_voltage;
static SemaphoreHandle_t mutex_pv_voltage;

// Set
static void seto_pv_voltage(const float *pVoltage) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  if (xSemaphoreTake(mutex_pv_voltage, 100 / portTICK_PERIOD_MS) == pdTRUE) {
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <seto_pv_voltage+0x3c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2164      	movs	r1, #100	; 0x64
 800485a:	4618      	mov	r0, r3
 800485c:	f7fe fdfc 	bl	8003458 <xQueueSemaphoreTake>
 8004860:	4603      	mov	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10b      	bne.n	800487e <seto_pv_voltage+0x32>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
    memcpy(&pv_voltage, pVoltage, sizeof(*pVoltage));
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <seto_pv_voltage+0x40>)
 800486e:	601a      	str	r2, [r3, #0]
    xSemaphoreGive(mutex_pv_voltage);
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <seto_pv_voltage+0x3c>)
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	2300      	movs	r3, #0
 8004876:	2200      	movs	r2, #0
 8004878:	2100      	movs	r1, #0
 800487a:	f7fe fcef 	bl	800325c <xQueueGenericSend>
  }
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20004254 	.word	0x20004254
 800488c:	20004250 	.word	0x20004250

08004890 <geto_pv_voltage>:

// Get
void geto_pv_voltage(float *pVoltage) {
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  // Returns a copy of the output
  if (xSemaphoreTake(mutex_pv_voltage, 100 / portTICK_PERIOD_MS) == pdTRUE) {
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <geto_pv_voltage+0x38>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2164      	movs	r1, #100	; 0x64
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe fdda 	bl	8003458 <xQueueSemaphoreTake>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d10a      	bne.n	80048c0 <geto_pv_voltage+0x30>
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <geto_pv_voltage+0x3c>)
 80048ac:	681a      	ldr	r2, [r3, #0]
    memcpy(pVoltage, &pv_voltage, sizeof(*pVoltage));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	601a      	str	r2, [r3, #0]
    xSemaphoreGive(mutex_pv_voltage);
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <geto_pv_voltage+0x38>)
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	2300      	movs	r3, #0
 80048b8:	2200      	movs	r2, #0
 80048ba:	2100      	movs	r1, #0
 80048bc:	f7fe fcce 	bl	800325c <xQueueGenericSend>
  }
}
 80048c0:	bf00      	nop
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20004254 	.word	0x20004254
 80048cc:	20004250 	.word	0x20004250

080048d0 <pv_init>:

// Init
void pv_init(void) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  pv_voltage = 0.0;
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <pv_init+0x1c>)
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
  mutex_pv_voltage = xSemaphoreCreateMutex();
 80048dc:	2001      	movs	r0, #1
 80048de:	f7fe fca4 	bl	800322a <xQueueCreateMutex>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4a02      	ldr	r2, [pc, #8]	; (80048f0 <pv_init+0x20>)
 80048e6:	6013      	str	r3, [r2, #0]
}
 80048e8:	bf00      	nop
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20004250 	.word	0x20004250
 80048f0:	20004254 	.word	0x20004254

080048f4 <pv_main>:

// ------- Actual function starts here! -------------
void pv_main() {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
  float voltage;
  geto_pv_voltage(&voltage);
 80048fa:	1d3b      	adds	r3, r7, #4
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff ffc7 	bl	8004890 <geto_pv_voltage>

  // Read raw data
  uint16_t analog_value;
  analog_value = pinin_pv();
 8004902:	f7fb ffa8 	bl	8000856 <pinin_pv>
 8004906:	4603      	mov	r3, r0
 8004908:	81fb      	strh	r3, [r7, #14]

  float temp;
  // TODO:
  const uint8_t ANALOG_IN_RESOLUTION = 10;
 800490a:	230a      	movs	r3, #10
 800490c:	737b      	strb	r3, [r7, #13]
  temp = ANALOG_IN_RESOLUTION * analog_value; // [mV] in the coordinates [0,5]
 800490e:	7b7b      	ldrb	r3, [r7, #13]
 8004910:	89fa      	ldrh	r2, [r7, #14]
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800491e:	edc7 7a02 	vstr	s15, [r7, #8]

  // Map V -> V,[0,5] linearly to [0,25]
  // This voltage meter maps [0,5] linearly to [0,25]
  voltage = temp * (float)5.0/(float)1000.0;
 8004922:	edd7 7a02 	vldr	s15, [r7, #8]
 8004926:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800492a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800492e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800494c <pv_main+0x58>
 8004932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004936:	edc7 7a01 	vstr	s15, [r7, #4]

  // OUTPUT
  seto_pv_voltage(&voltage);
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff ff85 	bl	800484c <seto_pv_voltage>
}
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	447a0000 	.word	0x447a0000

08004950 <serial_port_init>:
#include <stdio.h>
#include <stddef.h>

const size_t MESSAGE_SIZE_MAX = 100;

void serial_port_init() {}
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
	...

08004960 <serial_port_main>:

void serial_port_main() {
 8004960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004964:	b08d      	sub	sp, #52	; 0x34
 8004966:	af00      	add	r7, sp, #0
 8004968:	466b      	mov	r3, sp
 800496a:	461e      	mov	r6, r3
  // INPUTS
  uint8_t led_state;
  geto_blink_led_state(&led_state);
 800496c:	f107 031b 	add.w	r3, r7, #27
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fe5d 	bl	8004630 <geto_blink_led_state>

  size_t task1000ms_watermark;
  geto_debug_task_1000ms_watermark(&task1000ms_watermark);
 8004976:	f107 0314 	add.w	r3, r7, #20
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fee6 	bl	800474c <geto_debug_task_1000ms_watermark>

  size_t task200ms_watermark;
  geto_debug_task_200ms_watermark(&task200ms_watermark);
 8004980:	f107 0310 	add.w	r3, r7, #16
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff ff01 	bl	800478c <geto_debug_task_200ms_watermark>

  float pv_voltage;
  geto_pv_voltage(&pv_voltage);
 800498a:	f107 030c 	add.w	r3, r7, #12
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff ff7e 	bl	8004890 <geto_pv_voltage>

  float tempsens_value;
  geto_tempsens_value(&tempsens_value);
 8004994:	f107 0308 	add.w	r3, r7, #8
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f889 	bl	8004ab0 <geto_tempsens_value>
  /*     "led state: %d\ntask 1000ms watermark: %d\ntask 200ms watermark: %d\n",
   */
  /*     led_state, task1000ms_watermark, task200ms_watermark); */

  // Cast float readings into string. TODO OBS! dtostrf applies only to Arduino,
  const uint8_t MIN_WIDTH = 5;
 800499e:	2305      	movs	r3, #5
 80049a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  char pv_voltage_string[MIN_WIDTH];
 80049a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049a8:	3b01      	subs	r3, #1
 80049aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049b0:	2200      	movs	r2, #0
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	00cb      	lsls	r3, r1, #3
 80049c2:	6839      	ldr	r1, [r7, #0]
 80049c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c8:	6839      	ldr	r1, [r7, #0]
 80049ca:	00ca      	lsls	r2, r1, #3
 80049cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049d0:	2200      	movs	r2, #0
 80049d2:	469a      	mov	sl, r3
 80049d4:	4693      	mov	fp, r2
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049ee:	3307      	adds	r3, #7
 80049f0:	08db      	lsrs	r3, r3, #3
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	ebad 0d03 	sub.w	sp, sp, r3
 80049f8:	466b      	mov	r3, sp
 80049fa:	3300      	adds	r3, #0
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* dtostrf(pv_voltage, MIN_WIDTH, 2, pv_voltage_string); */
  char pv_readings[MESSAGE_SIZE_MAX];
 80049fe:	2364      	movs	r3, #100	; 0x64
 8004a00:	3b01      	subs	r3, #1
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	2264      	movs	r2, #100	; 0x64
 8004a06:	2300      	movs	r3, #0
 8004a08:	4690      	mov	r8, r2
 8004a0a:	4699      	mov	r9, r3
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a20:	2264      	movs	r2, #100	; 0x64
 8004a22:	2300      	movs	r3, #0
 8004a24:	4614      	mov	r4, r2
 8004a26:	461d      	mov	r5, r3
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	00eb      	lsls	r3, r5, #3
 8004a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a36:	00e2      	lsls	r2, r4, #3
 8004a38:	2364      	movs	r3, #100	; 0x64
 8004a3a:	3307      	adds	r3, #7
 8004a3c:	08db      	lsrs	r3, r3, #3
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	ebad 0d03 	sub.w	sp, sp, r3
 8004a44:	466b      	mov	r3, sp
 8004a46:	3300      	adds	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
  (void)snprintf(pv_readings, MESSAGE_SIZE_MAX, "Photovoltaic reading: %s V",
 8004a4a:	2164      	movs	r1, #100	; 0x64
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	4a06      	ldr	r2, [pc, #24]	; (8004a68 <serial_port_main+0x108>)
 8004a50:	69f8      	ldr	r0, [r7, #28]
 8004a52:	f000 f883 	bl	8004b5c <sniprintf>
                 pv_voltage_string);
  pinout_serial_port(pv_readings);
 8004a56:	69f8      	ldr	r0, [r7, #28]
 8004a58:	f7fb ff10 	bl	800087c <pinout_serial_port>
 8004a5c:	46b5      	mov	sp, r6
  /* static uint8_t prev_led_state = (led_state == 1) ? 0 : 1; */
  /* if (prev_led_state != led_state) { */
  /*   pinout_serial_port(message); */
  /*   prev_led_state = led_state; */
  /* } */
}
 8004a5e:	bf00      	nop
 8004a60:	3734      	adds	r7, #52	; 0x34
 8004a62:	46bd      	mov	sp, r7
 8004a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a68:	080054e4 	.word	0x080054e4

08004a6c <seto_tempsens_value>:
// OUTPUTS AS EXAMPLES OF SETTER AND GETTER METHODS
static float tempsens_value;
static SemaphoreHandle_t mutex_tempsens_value;

// Set
static void seto_tempsens_value(const float *pTempValue) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  if (xSemaphoreTake(mutex_tempsens_value, 100 / portTICK_PERIOD_MS) ==
 8004a74:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <seto_tempsens_value+0x3c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2164      	movs	r1, #100	; 0x64
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe fcec 	bl	8003458 <xQueueSemaphoreTake>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d10b      	bne.n	8004a9e <seto_tempsens_value+0x32>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
      pdTRUE) {
    memcpy(&tempsens_value, pTempValue, sizeof(*pTempValue));
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <seto_tempsens_value+0x40>)
 8004a8e:	601a      	str	r2, [r3, #0]
    xSemaphoreGive(mutex_tempsens_value);
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <seto_tempsens_value+0x3c>)
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	2300      	movs	r3, #0
 8004a96:	2200      	movs	r2, #0
 8004a98:	2100      	movs	r1, #0
 8004a9a:	f7fe fbdf 	bl	800325c <xQueueGenericSend>
  }
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	2000425c 	.word	0x2000425c
 8004aac:	20004258 	.word	0x20004258

08004ab0 <geto_tempsens_value>:

// Get
void geto_tempsens_value(float *pTempValue) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  // Returns a copy of the output
  if (xSemaphoreTake(mutex_tempsens_value, 100 / portTICK_PERIOD_MS) ==
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <geto_tempsens_value+0x38>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2164      	movs	r1, #100	; 0x64
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe fcca 	bl	8003458 <xQueueSemaphoreTake>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10a      	bne.n	8004ae0 <geto_tempsens_value+0x30>
 8004aca:	4b08      	ldr	r3, [pc, #32]	; (8004aec <geto_tempsens_value+0x3c>)
 8004acc:	681a      	ldr	r2, [r3, #0]
      pdTRUE) {
    memcpy(pTempValue, &tempsens_value, sizeof(*pTempValue));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
    xSemaphoreGive(mutex_tempsens_value);
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <geto_tempsens_value+0x38>)
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2100      	movs	r1, #0
 8004adc:	f7fe fbbe 	bl	800325c <xQueueGenericSend>
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	2000425c 	.word	0x2000425c
 8004aec:	20004258 	.word	0x20004258

08004af0 <tempsens_init>:

// Init
void tempsens_init(void) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  tempsens_value = 0.0;
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <tempsens_init+0x1c>)
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
  mutex_tempsens_value = xSemaphoreCreateMutex();
 8004afc:	2001      	movs	r0, #1
 8004afe:	f7fe fb94 	bl	800322a <xQueueCreateMutex>
 8004b02:	4603      	mov	r3, r0
 8004b04:	4a02      	ldr	r2, [pc, #8]	; (8004b10 <tempsens_init+0x20>)
 8004b06:	6013      	str	r3, [r2, #0]
}
 8004b08:	bf00      	nop
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20004258 	.word	0x20004258
 8004b10:	2000425c 	.word	0x2000425c

08004b14 <tempsens_main>:

// ------- Actual function starts here! -------------
void tempsens_main() {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
  /* float voltage_reading; */
  /* geto_tempsens_value(&voltage_reading); */

  // Read raw data
  uint16_t analog_value;
  analog_value = pinin_pv();
 8004b1a:	f7fb fe9c 	bl	8000856 <pinin_pv>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	81fb      	strh	r3, [r7, #14]

  float voltage;
  const uint8_t ANALOG_IN_RESOLUTION = 10;
 8004b22:	230a      	movs	r3, #10
 8004b24:	737b      	strb	r3, [r7, #13]
  voltage = ANALOG_IN_RESOLUTION * analog_value;
 8004b26:	7b7b      	ldrb	r3, [r7, #13]
 8004b28:	89fa      	ldrh	r2, [r7, #14]
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b36:	edc7 7a02 	vstr	s15, [r7, #8]

  // V -> Celsius, [0 5] -> [0 50] linearly.
  float temperature_measured;
  temperature_measured = voltage / (float)10.0;
 8004b3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b3e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004b42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b46:	edc7 7a01 	vstr	s15, [r7, #4]

  // OUTPUT
  seto_tempsens_value(&temperature_measured);
 8004b4a:	1d3b      	adds	r3, r7, #4
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff ff8d 	bl	8004a6c <seto_tempsens_value>
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <sniprintf>:
 8004b5c:	b40c      	push	{r2, r3}
 8004b5e:	b530      	push	{r4, r5, lr}
 8004b60:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <sniprintf+0x64>)
 8004b62:	1e0c      	subs	r4, r1, #0
 8004b64:	681d      	ldr	r5, [r3, #0]
 8004b66:	b09d      	sub	sp, #116	; 0x74
 8004b68:	da08      	bge.n	8004b7c <sniprintf+0x20>
 8004b6a:	238b      	movs	r3, #139	; 0x8b
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b72:	b01d      	add	sp, #116	; 0x74
 8004b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b78:	b002      	add	sp, #8
 8004b7a:	4770      	bx	lr
 8004b7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004b80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b84:	bf14      	ite	ne
 8004b86:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004b8a:	4623      	moveq	r3, r4
 8004b8c:	9304      	str	r3, [sp, #16]
 8004b8e:	9307      	str	r3, [sp, #28]
 8004b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b94:	9002      	str	r0, [sp, #8]
 8004b96:	9006      	str	r0, [sp, #24]
 8004b98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b9e:	ab21      	add	r3, sp, #132	; 0x84
 8004ba0:	a902      	add	r1, sp, #8
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	f000 f8a9 	bl	8004cfc <_svfiprintf_r>
 8004baa:	1c43      	adds	r3, r0, #1
 8004bac:	bfbc      	itt	lt
 8004bae:	238b      	movlt	r3, #139	; 0x8b
 8004bb0:	602b      	strlt	r3, [r5, #0]
 8004bb2:	2c00      	cmp	r4, #0
 8004bb4:	d0dd      	beq.n	8004b72 <sniprintf+0x16>
 8004bb6:	9b02      	ldr	r3, [sp, #8]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	e7d9      	b.n	8004b72 <sniprintf+0x16>
 8004bbe:	bf00      	nop
 8004bc0:	20000060 	.word	0x20000060

08004bc4 <memset>:
 8004bc4:	4402      	add	r2, r0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d100      	bne.n	8004bce <memset+0xa>
 8004bcc:	4770      	bx	lr
 8004bce:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd2:	e7f9      	b.n	8004bc8 <memset+0x4>

08004bd4 <__errno>:
 8004bd4:	4b01      	ldr	r3, [pc, #4]	; (8004bdc <__errno+0x8>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000060 	.word	0x20000060

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	4d0d      	ldr	r5, [pc, #52]	; (8004c18 <__libc_init_array+0x38>)
 8004be4:	4c0d      	ldr	r4, [pc, #52]	; (8004c1c <__libc_init_array+0x3c>)
 8004be6:	1b64      	subs	r4, r4, r5
 8004be8:	10a4      	asrs	r4, r4, #2
 8004bea:	2600      	movs	r6, #0
 8004bec:	42a6      	cmp	r6, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	4d0b      	ldr	r5, [pc, #44]	; (8004c20 <__libc_init_array+0x40>)
 8004bf2:	4c0c      	ldr	r4, [pc, #48]	; (8004c24 <__libc_init_array+0x44>)
 8004bf4:	f000 fc6a 	bl	80054cc <_init>
 8004bf8:	1b64      	subs	r4, r4, r5
 8004bfa:	10a4      	asrs	r4, r4, #2
 8004bfc:	2600      	movs	r6, #0
 8004bfe:	42a6      	cmp	r6, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c08:	4798      	blx	r3
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c12:	4798      	blx	r3
 8004c14:	3601      	adds	r6, #1
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	08005574 	.word	0x08005574
 8004c1c:	08005574 	.word	0x08005574
 8004c20:	08005574 	.word	0x08005574
 8004c24:	08005578 	.word	0x08005578

08004c28 <__retarget_lock_acquire_recursive>:
 8004c28:	4770      	bx	lr

08004c2a <__retarget_lock_release_recursive>:
 8004c2a:	4770      	bx	lr

08004c2c <memcpy>:
 8004c2c:	440a      	add	r2, r1
 8004c2e:	4291      	cmp	r1, r2
 8004c30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004c34:	d100      	bne.n	8004c38 <memcpy+0xc>
 8004c36:	4770      	bx	lr
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c42:	4291      	cmp	r1, r2
 8004c44:	d1f9      	bne.n	8004c3a <memcpy+0xe>
 8004c46:	bd10      	pop	{r4, pc}

08004c48 <__ssputs_r>:
 8004c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c4c:	688e      	ldr	r6, [r1, #8]
 8004c4e:	461f      	mov	r7, r3
 8004c50:	42be      	cmp	r6, r7
 8004c52:	680b      	ldr	r3, [r1, #0]
 8004c54:	4682      	mov	sl, r0
 8004c56:	460c      	mov	r4, r1
 8004c58:	4690      	mov	r8, r2
 8004c5a:	d82c      	bhi.n	8004cb6 <__ssputs_r+0x6e>
 8004c5c:	898a      	ldrh	r2, [r1, #12]
 8004c5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c62:	d026      	beq.n	8004cb2 <__ssputs_r+0x6a>
 8004c64:	6965      	ldr	r5, [r4, #20]
 8004c66:	6909      	ldr	r1, [r1, #16]
 8004c68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c6c:	eba3 0901 	sub.w	r9, r3, r1
 8004c70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c74:	1c7b      	adds	r3, r7, #1
 8004c76:	444b      	add	r3, r9
 8004c78:	106d      	asrs	r5, r5, #1
 8004c7a:	429d      	cmp	r5, r3
 8004c7c:	bf38      	it	cc
 8004c7e:	461d      	movcc	r5, r3
 8004c80:	0553      	lsls	r3, r2, #21
 8004c82:	d527      	bpl.n	8004cd4 <__ssputs_r+0x8c>
 8004c84:	4629      	mov	r1, r5
 8004c86:	f000 f957 	bl	8004f38 <_malloc_r>
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	b360      	cbz	r0, 8004ce8 <__ssputs_r+0xa0>
 8004c8e:	6921      	ldr	r1, [r4, #16]
 8004c90:	464a      	mov	r2, r9
 8004c92:	f7ff ffcb 	bl	8004c2c <memcpy>
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca0:	81a3      	strh	r3, [r4, #12]
 8004ca2:	6126      	str	r6, [r4, #16]
 8004ca4:	6165      	str	r5, [r4, #20]
 8004ca6:	444e      	add	r6, r9
 8004ca8:	eba5 0509 	sub.w	r5, r5, r9
 8004cac:	6026      	str	r6, [r4, #0]
 8004cae:	60a5      	str	r5, [r4, #8]
 8004cb0:	463e      	mov	r6, r7
 8004cb2:	42be      	cmp	r6, r7
 8004cb4:	d900      	bls.n	8004cb8 <__ssputs_r+0x70>
 8004cb6:	463e      	mov	r6, r7
 8004cb8:	6820      	ldr	r0, [r4, #0]
 8004cba:	4632      	mov	r2, r6
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	f000 fb86 	bl	80053ce <memmove>
 8004cc2:	68a3      	ldr	r3, [r4, #8]
 8004cc4:	1b9b      	subs	r3, r3, r6
 8004cc6:	60a3      	str	r3, [r4, #8]
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	4433      	add	r3, r6
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	2000      	movs	r0, #0
 8004cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd4:	462a      	mov	r2, r5
 8004cd6:	f000 fb4b 	bl	8005370 <_realloc_r>
 8004cda:	4606      	mov	r6, r0
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d1e0      	bne.n	8004ca2 <__ssputs_r+0x5a>
 8004ce0:	6921      	ldr	r1, [r4, #16]
 8004ce2:	4650      	mov	r0, sl
 8004ce4:	f000 fb9e 	bl	8005424 <_free_r>
 8004ce8:	230c      	movs	r3, #12
 8004cea:	f8ca 3000 	str.w	r3, [sl]
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf4:	81a3      	strh	r3, [r4, #12]
 8004cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cfa:	e7e9      	b.n	8004cd0 <__ssputs_r+0x88>

08004cfc <_svfiprintf_r>:
 8004cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d00:	4698      	mov	r8, r3
 8004d02:	898b      	ldrh	r3, [r1, #12]
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	b09d      	sub	sp, #116	; 0x74
 8004d08:	4607      	mov	r7, r0
 8004d0a:	460d      	mov	r5, r1
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	d50e      	bpl.n	8004d2e <_svfiprintf_r+0x32>
 8004d10:	690b      	ldr	r3, [r1, #16]
 8004d12:	b963      	cbnz	r3, 8004d2e <_svfiprintf_r+0x32>
 8004d14:	2140      	movs	r1, #64	; 0x40
 8004d16:	f000 f90f 	bl	8004f38 <_malloc_r>
 8004d1a:	6028      	str	r0, [r5, #0]
 8004d1c:	6128      	str	r0, [r5, #16]
 8004d1e:	b920      	cbnz	r0, 8004d2a <_svfiprintf_r+0x2e>
 8004d20:	230c      	movs	r3, #12
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d28:	e0d0      	b.n	8004ecc <_svfiprintf_r+0x1d0>
 8004d2a:	2340      	movs	r3, #64	; 0x40
 8004d2c:	616b      	str	r3, [r5, #20]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	9309      	str	r3, [sp, #36]	; 0x24
 8004d32:	2320      	movs	r3, #32
 8004d34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d3c:	2330      	movs	r3, #48	; 0x30
 8004d3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ee4 <_svfiprintf_r+0x1e8>
 8004d42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d46:	f04f 0901 	mov.w	r9, #1
 8004d4a:	4623      	mov	r3, r4
 8004d4c:	469a      	mov	sl, r3
 8004d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d52:	b10a      	cbz	r2, 8004d58 <_svfiprintf_r+0x5c>
 8004d54:	2a25      	cmp	r2, #37	; 0x25
 8004d56:	d1f9      	bne.n	8004d4c <_svfiprintf_r+0x50>
 8004d58:	ebba 0b04 	subs.w	fp, sl, r4
 8004d5c:	d00b      	beq.n	8004d76 <_svfiprintf_r+0x7a>
 8004d5e:	465b      	mov	r3, fp
 8004d60:	4622      	mov	r2, r4
 8004d62:	4629      	mov	r1, r5
 8004d64:	4638      	mov	r0, r7
 8004d66:	f7ff ff6f 	bl	8004c48 <__ssputs_r>
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	f000 80a9 	beq.w	8004ec2 <_svfiprintf_r+0x1c6>
 8004d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d72:	445a      	add	r2, fp
 8004d74:	9209      	str	r2, [sp, #36]	; 0x24
 8004d76:	f89a 3000 	ldrb.w	r3, [sl]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 80a1 	beq.w	8004ec2 <_svfiprintf_r+0x1c6>
 8004d80:	2300      	movs	r3, #0
 8004d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d8a:	f10a 0a01 	add.w	sl, sl, #1
 8004d8e:	9304      	str	r3, [sp, #16]
 8004d90:	9307      	str	r3, [sp, #28]
 8004d92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d96:	931a      	str	r3, [sp, #104]	; 0x68
 8004d98:	4654      	mov	r4, sl
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da0:	4850      	ldr	r0, [pc, #320]	; (8004ee4 <_svfiprintf_r+0x1e8>)
 8004da2:	f7fb fa35 	bl	8000210 <memchr>
 8004da6:	9a04      	ldr	r2, [sp, #16]
 8004da8:	b9d8      	cbnz	r0, 8004de2 <_svfiprintf_r+0xe6>
 8004daa:	06d0      	lsls	r0, r2, #27
 8004dac:	bf44      	itt	mi
 8004dae:	2320      	movmi	r3, #32
 8004db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004db4:	0711      	lsls	r1, r2, #28
 8004db6:	bf44      	itt	mi
 8004db8:	232b      	movmi	r3, #43	; 0x2b
 8004dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8004dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8004dc4:	d015      	beq.n	8004df2 <_svfiprintf_r+0xf6>
 8004dc6:	9a07      	ldr	r2, [sp, #28]
 8004dc8:	4654      	mov	r4, sl
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f04f 0c0a 	mov.w	ip, #10
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dd6:	3b30      	subs	r3, #48	; 0x30
 8004dd8:	2b09      	cmp	r3, #9
 8004dda:	d94d      	bls.n	8004e78 <_svfiprintf_r+0x17c>
 8004ddc:	b1b0      	cbz	r0, 8004e0c <_svfiprintf_r+0x110>
 8004dde:	9207      	str	r2, [sp, #28]
 8004de0:	e014      	b.n	8004e0c <_svfiprintf_r+0x110>
 8004de2:	eba0 0308 	sub.w	r3, r0, r8
 8004de6:	fa09 f303 	lsl.w	r3, r9, r3
 8004dea:	4313      	orrs	r3, r2
 8004dec:	9304      	str	r3, [sp, #16]
 8004dee:	46a2      	mov	sl, r4
 8004df0:	e7d2      	b.n	8004d98 <_svfiprintf_r+0x9c>
 8004df2:	9b03      	ldr	r3, [sp, #12]
 8004df4:	1d19      	adds	r1, r3, #4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	9103      	str	r1, [sp, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bfbb      	ittet	lt
 8004dfe:	425b      	neglt	r3, r3
 8004e00:	f042 0202 	orrlt.w	r2, r2, #2
 8004e04:	9307      	strge	r3, [sp, #28]
 8004e06:	9307      	strlt	r3, [sp, #28]
 8004e08:	bfb8      	it	lt
 8004e0a:	9204      	strlt	r2, [sp, #16]
 8004e0c:	7823      	ldrb	r3, [r4, #0]
 8004e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e10:	d10c      	bne.n	8004e2c <_svfiprintf_r+0x130>
 8004e12:	7863      	ldrb	r3, [r4, #1]
 8004e14:	2b2a      	cmp	r3, #42	; 0x2a
 8004e16:	d134      	bne.n	8004e82 <_svfiprintf_r+0x186>
 8004e18:	9b03      	ldr	r3, [sp, #12]
 8004e1a:	1d1a      	adds	r2, r3, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	9203      	str	r2, [sp, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bfb8      	it	lt
 8004e24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e28:	3402      	adds	r4, #2
 8004e2a:	9305      	str	r3, [sp, #20]
 8004e2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004ef4 <_svfiprintf_r+0x1f8>
 8004e30:	7821      	ldrb	r1, [r4, #0]
 8004e32:	2203      	movs	r2, #3
 8004e34:	4650      	mov	r0, sl
 8004e36:	f7fb f9eb 	bl	8000210 <memchr>
 8004e3a:	b138      	cbz	r0, 8004e4c <_svfiprintf_r+0x150>
 8004e3c:	9b04      	ldr	r3, [sp, #16]
 8004e3e:	eba0 000a 	sub.w	r0, r0, sl
 8004e42:	2240      	movs	r2, #64	; 0x40
 8004e44:	4082      	lsls	r2, r0
 8004e46:	4313      	orrs	r3, r2
 8004e48:	3401      	adds	r4, #1
 8004e4a:	9304      	str	r3, [sp, #16]
 8004e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e50:	4825      	ldr	r0, [pc, #148]	; (8004ee8 <_svfiprintf_r+0x1ec>)
 8004e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e56:	2206      	movs	r2, #6
 8004e58:	f7fb f9da 	bl	8000210 <memchr>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d038      	beq.n	8004ed2 <_svfiprintf_r+0x1d6>
 8004e60:	4b22      	ldr	r3, [pc, #136]	; (8004eec <_svfiprintf_r+0x1f0>)
 8004e62:	bb1b      	cbnz	r3, 8004eac <_svfiprintf_r+0x1b0>
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	3307      	adds	r3, #7
 8004e68:	f023 0307 	bic.w	r3, r3, #7
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	9303      	str	r3, [sp, #12]
 8004e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e72:	4433      	add	r3, r6
 8004e74:	9309      	str	r3, [sp, #36]	; 0x24
 8004e76:	e768      	b.n	8004d4a <_svfiprintf_r+0x4e>
 8004e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	2001      	movs	r0, #1
 8004e80:	e7a6      	b.n	8004dd0 <_svfiprintf_r+0xd4>
 8004e82:	2300      	movs	r3, #0
 8004e84:	3401      	adds	r4, #1
 8004e86:	9305      	str	r3, [sp, #20]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f04f 0c0a 	mov.w	ip, #10
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e94:	3a30      	subs	r2, #48	; 0x30
 8004e96:	2a09      	cmp	r2, #9
 8004e98:	d903      	bls.n	8004ea2 <_svfiprintf_r+0x1a6>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0c6      	beq.n	8004e2c <_svfiprintf_r+0x130>
 8004e9e:	9105      	str	r1, [sp, #20]
 8004ea0:	e7c4      	b.n	8004e2c <_svfiprintf_r+0x130>
 8004ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e7f0      	b.n	8004e8e <_svfiprintf_r+0x192>
 8004eac:	ab03      	add	r3, sp, #12
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <_svfiprintf_r+0x1f4>)
 8004eb4:	a904      	add	r1, sp, #16
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f3af 8000 	nop.w
 8004ebc:	1c42      	adds	r2, r0, #1
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	d1d6      	bne.n	8004e70 <_svfiprintf_r+0x174>
 8004ec2:	89ab      	ldrh	r3, [r5, #12]
 8004ec4:	065b      	lsls	r3, r3, #25
 8004ec6:	f53f af2d 	bmi.w	8004d24 <_svfiprintf_r+0x28>
 8004eca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ecc:	b01d      	add	sp, #116	; 0x74
 8004ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed2:	ab03      	add	r3, sp, #12
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	462a      	mov	r2, r5
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <_svfiprintf_r+0x1f4>)
 8004eda:	a904      	add	r1, sp, #16
 8004edc:	4638      	mov	r0, r7
 8004ede:	f000 f919 	bl	8005114 <_printf_i>
 8004ee2:	e7eb      	b.n	8004ebc <_svfiprintf_r+0x1c0>
 8004ee4:	08005538 	.word	0x08005538
 8004ee8:	08005542 	.word	0x08005542
 8004eec:	00000000 	.word	0x00000000
 8004ef0:	08004c49 	.word	0x08004c49
 8004ef4:	0800553e 	.word	0x0800553e

08004ef8 <sbrk_aligned>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	4e0e      	ldr	r6, [pc, #56]	; (8004f34 <sbrk_aligned+0x3c>)
 8004efc:	460c      	mov	r4, r1
 8004efe:	6831      	ldr	r1, [r6, #0]
 8004f00:	4605      	mov	r5, r0
 8004f02:	b911      	cbnz	r1, 8004f0a <sbrk_aligned+0x12>
 8004f04:	f000 fa7e 	bl	8005404 <_sbrk_r>
 8004f08:	6030      	str	r0, [r6, #0]
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 fa79 	bl	8005404 <_sbrk_r>
 8004f12:	1c43      	adds	r3, r0, #1
 8004f14:	d00a      	beq.n	8004f2c <sbrk_aligned+0x34>
 8004f16:	1cc4      	adds	r4, r0, #3
 8004f18:	f024 0403 	bic.w	r4, r4, #3
 8004f1c:	42a0      	cmp	r0, r4
 8004f1e:	d007      	beq.n	8004f30 <sbrk_aligned+0x38>
 8004f20:	1a21      	subs	r1, r4, r0
 8004f22:	4628      	mov	r0, r5
 8004f24:	f000 fa6e 	bl	8005404 <_sbrk_r>
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d101      	bne.n	8004f30 <sbrk_aligned+0x38>
 8004f2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f30:	4620      	mov	r0, r4
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	200043a0 	.word	0x200043a0

08004f38 <_malloc_r>:
 8004f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f3c:	1ccd      	adds	r5, r1, #3
 8004f3e:	f025 0503 	bic.w	r5, r5, #3
 8004f42:	3508      	adds	r5, #8
 8004f44:	2d0c      	cmp	r5, #12
 8004f46:	bf38      	it	cc
 8004f48:	250c      	movcc	r5, #12
 8004f4a:	2d00      	cmp	r5, #0
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	db01      	blt.n	8004f54 <_malloc_r+0x1c>
 8004f50:	42a9      	cmp	r1, r5
 8004f52:	d905      	bls.n	8004f60 <_malloc_r+0x28>
 8004f54:	230c      	movs	r3, #12
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	2600      	movs	r6, #0
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005034 <_malloc_r+0xfc>
 8004f64:	f000 f9f8 	bl	8005358 <__malloc_lock>
 8004f68:	f8d8 3000 	ldr.w	r3, [r8]
 8004f6c:	461c      	mov	r4, r3
 8004f6e:	bb5c      	cbnz	r4, 8004fc8 <_malloc_r+0x90>
 8004f70:	4629      	mov	r1, r5
 8004f72:	4638      	mov	r0, r7
 8004f74:	f7ff ffc0 	bl	8004ef8 <sbrk_aligned>
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	d155      	bne.n	800502a <_malloc_r+0xf2>
 8004f7e:	f8d8 4000 	ldr.w	r4, [r8]
 8004f82:	4626      	mov	r6, r4
 8004f84:	2e00      	cmp	r6, #0
 8004f86:	d145      	bne.n	8005014 <_malloc_r+0xdc>
 8004f88:	2c00      	cmp	r4, #0
 8004f8a:	d048      	beq.n	800501e <_malloc_r+0xe6>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4638      	mov	r0, r7
 8004f92:	eb04 0903 	add.w	r9, r4, r3
 8004f96:	f000 fa35 	bl	8005404 <_sbrk_r>
 8004f9a:	4581      	cmp	r9, r0
 8004f9c:	d13f      	bne.n	800501e <_malloc_r+0xe6>
 8004f9e:	6821      	ldr	r1, [r4, #0]
 8004fa0:	1a6d      	subs	r5, r5, r1
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	f7ff ffa7 	bl	8004ef8 <sbrk_aligned>
 8004faa:	3001      	adds	r0, #1
 8004fac:	d037      	beq.n	800501e <_malloc_r+0xe6>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	442b      	add	r3, r5
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d038      	beq.n	800502e <_malloc_r+0xf6>
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	42a2      	cmp	r2, r4
 8004fc0:	d12b      	bne.n	800501a <_malloc_r+0xe2>
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	e00f      	b.n	8004fe8 <_malloc_r+0xb0>
 8004fc8:	6822      	ldr	r2, [r4, #0]
 8004fca:	1b52      	subs	r2, r2, r5
 8004fcc:	d41f      	bmi.n	800500e <_malloc_r+0xd6>
 8004fce:	2a0b      	cmp	r2, #11
 8004fd0:	d917      	bls.n	8005002 <_malloc_r+0xca>
 8004fd2:	1961      	adds	r1, r4, r5
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	6025      	str	r5, [r4, #0]
 8004fd8:	bf18      	it	ne
 8004fda:	6059      	strne	r1, [r3, #4]
 8004fdc:	6863      	ldr	r3, [r4, #4]
 8004fde:	bf08      	it	eq
 8004fe0:	f8c8 1000 	streq.w	r1, [r8]
 8004fe4:	5162      	str	r2, [r4, r5]
 8004fe6:	604b      	str	r3, [r1, #4]
 8004fe8:	4638      	mov	r0, r7
 8004fea:	f104 060b 	add.w	r6, r4, #11
 8004fee:	f000 f9b9 	bl	8005364 <__malloc_unlock>
 8004ff2:	f026 0607 	bic.w	r6, r6, #7
 8004ff6:	1d23      	adds	r3, r4, #4
 8004ff8:	1af2      	subs	r2, r6, r3
 8004ffa:	d0ae      	beq.n	8004f5a <_malloc_r+0x22>
 8004ffc:	1b9b      	subs	r3, r3, r6
 8004ffe:	50a3      	str	r3, [r4, r2]
 8005000:	e7ab      	b.n	8004f5a <_malloc_r+0x22>
 8005002:	42a3      	cmp	r3, r4
 8005004:	6862      	ldr	r2, [r4, #4]
 8005006:	d1dd      	bne.n	8004fc4 <_malloc_r+0x8c>
 8005008:	f8c8 2000 	str.w	r2, [r8]
 800500c:	e7ec      	b.n	8004fe8 <_malloc_r+0xb0>
 800500e:	4623      	mov	r3, r4
 8005010:	6864      	ldr	r4, [r4, #4]
 8005012:	e7ac      	b.n	8004f6e <_malloc_r+0x36>
 8005014:	4634      	mov	r4, r6
 8005016:	6876      	ldr	r6, [r6, #4]
 8005018:	e7b4      	b.n	8004f84 <_malloc_r+0x4c>
 800501a:	4613      	mov	r3, r2
 800501c:	e7cc      	b.n	8004fb8 <_malloc_r+0x80>
 800501e:	230c      	movs	r3, #12
 8005020:	603b      	str	r3, [r7, #0]
 8005022:	4638      	mov	r0, r7
 8005024:	f000 f99e 	bl	8005364 <__malloc_unlock>
 8005028:	e797      	b.n	8004f5a <_malloc_r+0x22>
 800502a:	6025      	str	r5, [r4, #0]
 800502c:	e7dc      	b.n	8004fe8 <_malloc_r+0xb0>
 800502e:	605b      	str	r3, [r3, #4]
 8005030:	deff      	udf	#255	; 0xff
 8005032:	bf00      	nop
 8005034:	2000439c 	.word	0x2000439c

08005038 <_printf_common>:
 8005038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800503c:	4616      	mov	r6, r2
 800503e:	4699      	mov	r9, r3
 8005040:	688a      	ldr	r2, [r1, #8]
 8005042:	690b      	ldr	r3, [r1, #16]
 8005044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005048:	4293      	cmp	r3, r2
 800504a:	bfb8      	it	lt
 800504c:	4613      	movlt	r3, r2
 800504e:	6033      	str	r3, [r6, #0]
 8005050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005054:	4607      	mov	r7, r0
 8005056:	460c      	mov	r4, r1
 8005058:	b10a      	cbz	r2, 800505e <_printf_common+0x26>
 800505a:	3301      	adds	r3, #1
 800505c:	6033      	str	r3, [r6, #0]
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	0699      	lsls	r1, r3, #26
 8005062:	bf42      	ittt	mi
 8005064:	6833      	ldrmi	r3, [r6, #0]
 8005066:	3302      	addmi	r3, #2
 8005068:	6033      	strmi	r3, [r6, #0]
 800506a:	6825      	ldr	r5, [r4, #0]
 800506c:	f015 0506 	ands.w	r5, r5, #6
 8005070:	d106      	bne.n	8005080 <_printf_common+0x48>
 8005072:	f104 0a19 	add.w	sl, r4, #25
 8005076:	68e3      	ldr	r3, [r4, #12]
 8005078:	6832      	ldr	r2, [r6, #0]
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	42ab      	cmp	r3, r5
 800507e:	dc26      	bgt.n	80050ce <_printf_common+0x96>
 8005080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005084:	1e13      	subs	r3, r2, #0
 8005086:	6822      	ldr	r2, [r4, #0]
 8005088:	bf18      	it	ne
 800508a:	2301      	movne	r3, #1
 800508c:	0692      	lsls	r2, r2, #26
 800508e:	d42b      	bmi.n	80050e8 <_printf_common+0xb0>
 8005090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005094:	4649      	mov	r1, r9
 8005096:	4638      	mov	r0, r7
 8005098:	47c0      	blx	r8
 800509a:	3001      	adds	r0, #1
 800509c:	d01e      	beq.n	80050dc <_printf_common+0xa4>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	6922      	ldr	r2, [r4, #16]
 80050a2:	f003 0306 	and.w	r3, r3, #6
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	bf02      	ittt	eq
 80050aa:	68e5      	ldreq	r5, [r4, #12]
 80050ac:	6833      	ldreq	r3, [r6, #0]
 80050ae:	1aed      	subeq	r5, r5, r3
 80050b0:	68a3      	ldr	r3, [r4, #8]
 80050b2:	bf0c      	ite	eq
 80050b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050b8:	2500      	movne	r5, #0
 80050ba:	4293      	cmp	r3, r2
 80050bc:	bfc4      	itt	gt
 80050be:	1a9b      	subgt	r3, r3, r2
 80050c0:	18ed      	addgt	r5, r5, r3
 80050c2:	2600      	movs	r6, #0
 80050c4:	341a      	adds	r4, #26
 80050c6:	42b5      	cmp	r5, r6
 80050c8:	d11a      	bne.n	8005100 <_printf_common+0xc8>
 80050ca:	2000      	movs	r0, #0
 80050cc:	e008      	b.n	80050e0 <_printf_common+0xa8>
 80050ce:	2301      	movs	r3, #1
 80050d0:	4652      	mov	r2, sl
 80050d2:	4649      	mov	r1, r9
 80050d4:	4638      	mov	r0, r7
 80050d6:	47c0      	blx	r8
 80050d8:	3001      	adds	r0, #1
 80050da:	d103      	bne.n	80050e4 <_printf_common+0xac>
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e4:	3501      	adds	r5, #1
 80050e6:	e7c6      	b.n	8005076 <_printf_common+0x3e>
 80050e8:	18e1      	adds	r1, r4, r3
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	2030      	movs	r0, #48	; 0x30
 80050ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050f2:	4422      	add	r2, r4
 80050f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050fc:	3302      	adds	r3, #2
 80050fe:	e7c7      	b.n	8005090 <_printf_common+0x58>
 8005100:	2301      	movs	r3, #1
 8005102:	4622      	mov	r2, r4
 8005104:	4649      	mov	r1, r9
 8005106:	4638      	mov	r0, r7
 8005108:	47c0      	blx	r8
 800510a:	3001      	adds	r0, #1
 800510c:	d0e6      	beq.n	80050dc <_printf_common+0xa4>
 800510e:	3601      	adds	r6, #1
 8005110:	e7d9      	b.n	80050c6 <_printf_common+0x8e>
	...

08005114 <_printf_i>:
 8005114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	7e0f      	ldrb	r7, [r1, #24]
 800511a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800511c:	2f78      	cmp	r7, #120	; 0x78
 800511e:	4691      	mov	r9, r2
 8005120:	4680      	mov	r8, r0
 8005122:	460c      	mov	r4, r1
 8005124:	469a      	mov	sl, r3
 8005126:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800512a:	d807      	bhi.n	800513c <_printf_i+0x28>
 800512c:	2f62      	cmp	r7, #98	; 0x62
 800512e:	d80a      	bhi.n	8005146 <_printf_i+0x32>
 8005130:	2f00      	cmp	r7, #0
 8005132:	f000 80d4 	beq.w	80052de <_printf_i+0x1ca>
 8005136:	2f58      	cmp	r7, #88	; 0x58
 8005138:	f000 80c0 	beq.w	80052bc <_printf_i+0x1a8>
 800513c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005144:	e03a      	b.n	80051bc <_printf_i+0xa8>
 8005146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800514a:	2b15      	cmp	r3, #21
 800514c:	d8f6      	bhi.n	800513c <_printf_i+0x28>
 800514e:	a101      	add	r1, pc, #4	; (adr r1, 8005154 <_printf_i+0x40>)
 8005150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005154:	080051ad 	.word	0x080051ad
 8005158:	080051c1 	.word	0x080051c1
 800515c:	0800513d 	.word	0x0800513d
 8005160:	0800513d 	.word	0x0800513d
 8005164:	0800513d 	.word	0x0800513d
 8005168:	0800513d 	.word	0x0800513d
 800516c:	080051c1 	.word	0x080051c1
 8005170:	0800513d 	.word	0x0800513d
 8005174:	0800513d 	.word	0x0800513d
 8005178:	0800513d 	.word	0x0800513d
 800517c:	0800513d 	.word	0x0800513d
 8005180:	080052c5 	.word	0x080052c5
 8005184:	080051ed 	.word	0x080051ed
 8005188:	0800527f 	.word	0x0800527f
 800518c:	0800513d 	.word	0x0800513d
 8005190:	0800513d 	.word	0x0800513d
 8005194:	080052e7 	.word	0x080052e7
 8005198:	0800513d 	.word	0x0800513d
 800519c:	080051ed 	.word	0x080051ed
 80051a0:	0800513d 	.word	0x0800513d
 80051a4:	0800513d 	.word	0x0800513d
 80051a8:	08005287 	.word	0x08005287
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	1d1a      	adds	r2, r3, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	602a      	str	r2, [r5, #0]
 80051b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051bc:	2301      	movs	r3, #1
 80051be:	e09f      	b.n	8005300 <_printf_i+0x1ec>
 80051c0:	6820      	ldr	r0, [r4, #0]
 80051c2:	682b      	ldr	r3, [r5, #0]
 80051c4:	0607      	lsls	r7, r0, #24
 80051c6:	f103 0104 	add.w	r1, r3, #4
 80051ca:	6029      	str	r1, [r5, #0]
 80051cc:	d501      	bpl.n	80051d2 <_printf_i+0xbe>
 80051ce:	681e      	ldr	r6, [r3, #0]
 80051d0:	e003      	b.n	80051da <_printf_i+0xc6>
 80051d2:	0646      	lsls	r6, r0, #25
 80051d4:	d5fb      	bpl.n	80051ce <_printf_i+0xba>
 80051d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051da:	2e00      	cmp	r6, #0
 80051dc:	da03      	bge.n	80051e6 <_printf_i+0xd2>
 80051de:	232d      	movs	r3, #45	; 0x2d
 80051e0:	4276      	negs	r6, r6
 80051e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051e6:	485a      	ldr	r0, [pc, #360]	; (8005350 <_printf_i+0x23c>)
 80051e8:	230a      	movs	r3, #10
 80051ea:	e012      	b.n	8005212 <_printf_i+0xfe>
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	6820      	ldr	r0, [r4, #0]
 80051f0:	1d19      	adds	r1, r3, #4
 80051f2:	6029      	str	r1, [r5, #0]
 80051f4:	0605      	lsls	r5, r0, #24
 80051f6:	d501      	bpl.n	80051fc <_printf_i+0xe8>
 80051f8:	681e      	ldr	r6, [r3, #0]
 80051fa:	e002      	b.n	8005202 <_printf_i+0xee>
 80051fc:	0641      	lsls	r1, r0, #25
 80051fe:	d5fb      	bpl.n	80051f8 <_printf_i+0xe4>
 8005200:	881e      	ldrh	r6, [r3, #0]
 8005202:	4853      	ldr	r0, [pc, #332]	; (8005350 <_printf_i+0x23c>)
 8005204:	2f6f      	cmp	r7, #111	; 0x6f
 8005206:	bf0c      	ite	eq
 8005208:	2308      	moveq	r3, #8
 800520a:	230a      	movne	r3, #10
 800520c:	2100      	movs	r1, #0
 800520e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005212:	6865      	ldr	r5, [r4, #4]
 8005214:	60a5      	str	r5, [r4, #8]
 8005216:	2d00      	cmp	r5, #0
 8005218:	bfa2      	ittt	ge
 800521a:	6821      	ldrge	r1, [r4, #0]
 800521c:	f021 0104 	bicge.w	r1, r1, #4
 8005220:	6021      	strge	r1, [r4, #0]
 8005222:	b90e      	cbnz	r6, 8005228 <_printf_i+0x114>
 8005224:	2d00      	cmp	r5, #0
 8005226:	d04b      	beq.n	80052c0 <_printf_i+0x1ac>
 8005228:	4615      	mov	r5, r2
 800522a:	fbb6 f1f3 	udiv	r1, r6, r3
 800522e:	fb03 6711 	mls	r7, r3, r1, r6
 8005232:	5dc7      	ldrb	r7, [r0, r7]
 8005234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005238:	4637      	mov	r7, r6
 800523a:	42bb      	cmp	r3, r7
 800523c:	460e      	mov	r6, r1
 800523e:	d9f4      	bls.n	800522a <_printf_i+0x116>
 8005240:	2b08      	cmp	r3, #8
 8005242:	d10b      	bne.n	800525c <_printf_i+0x148>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	07de      	lsls	r6, r3, #31
 8005248:	d508      	bpl.n	800525c <_printf_i+0x148>
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	6861      	ldr	r1, [r4, #4]
 800524e:	4299      	cmp	r1, r3
 8005250:	bfde      	ittt	le
 8005252:	2330      	movle	r3, #48	; 0x30
 8005254:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005258:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800525c:	1b52      	subs	r2, r2, r5
 800525e:	6122      	str	r2, [r4, #16]
 8005260:	f8cd a000 	str.w	sl, [sp]
 8005264:	464b      	mov	r3, r9
 8005266:	aa03      	add	r2, sp, #12
 8005268:	4621      	mov	r1, r4
 800526a:	4640      	mov	r0, r8
 800526c:	f7ff fee4 	bl	8005038 <_printf_common>
 8005270:	3001      	adds	r0, #1
 8005272:	d14a      	bne.n	800530a <_printf_i+0x1f6>
 8005274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005278:	b004      	add	sp, #16
 800527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	f043 0320 	orr.w	r3, r3, #32
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	4833      	ldr	r0, [pc, #204]	; (8005354 <_printf_i+0x240>)
 8005288:	2778      	movs	r7, #120	; 0x78
 800528a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	6829      	ldr	r1, [r5, #0]
 8005292:	061f      	lsls	r7, r3, #24
 8005294:	f851 6b04 	ldr.w	r6, [r1], #4
 8005298:	d402      	bmi.n	80052a0 <_printf_i+0x18c>
 800529a:	065f      	lsls	r7, r3, #25
 800529c:	bf48      	it	mi
 800529e:	b2b6      	uxthmi	r6, r6
 80052a0:	07df      	lsls	r7, r3, #31
 80052a2:	bf48      	it	mi
 80052a4:	f043 0320 	orrmi.w	r3, r3, #32
 80052a8:	6029      	str	r1, [r5, #0]
 80052aa:	bf48      	it	mi
 80052ac:	6023      	strmi	r3, [r4, #0]
 80052ae:	b91e      	cbnz	r6, 80052b8 <_printf_i+0x1a4>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	f023 0320 	bic.w	r3, r3, #32
 80052b6:	6023      	str	r3, [r4, #0]
 80052b8:	2310      	movs	r3, #16
 80052ba:	e7a7      	b.n	800520c <_printf_i+0xf8>
 80052bc:	4824      	ldr	r0, [pc, #144]	; (8005350 <_printf_i+0x23c>)
 80052be:	e7e4      	b.n	800528a <_printf_i+0x176>
 80052c0:	4615      	mov	r5, r2
 80052c2:	e7bd      	b.n	8005240 <_printf_i+0x12c>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	6826      	ldr	r6, [r4, #0]
 80052c8:	6961      	ldr	r1, [r4, #20]
 80052ca:	1d18      	adds	r0, r3, #4
 80052cc:	6028      	str	r0, [r5, #0]
 80052ce:	0635      	lsls	r5, r6, #24
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	d501      	bpl.n	80052d8 <_printf_i+0x1c4>
 80052d4:	6019      	str	r1, [r3, #0]
 80052d6:	e002      	b.n	80052de <_printf_i+0x1ca>
 80052d8:	0670      	lsls	r0, r6, #25
 80052da:	d5fb      	bpl.n	80052d4 <_printf_i+0x1c0>
 80052dc:	8019      	strh	r1, [r3, #0]
 80052de:	2300      	movs	r3, #0
 80052e0:	6123      	str	r3, [r4, #16]
 80052e2:	4615      	mov	r5, r2
 80052e4:	e7bc      	b.n	8005260 <_printf_i+0x14c>
 80052e6:	682b      	ldr	r3, [r5, #0]
 80052e8:	1d1a      	adds	r2, r3, #4
 80052ea:	602a      	str	r2, [r5, #0]
 80052ec:	681d      	ldr	r5, [r3, #0]
 80052ee:	6862      	ldr	r2, [r4, #4]
 80052f0:	2100      	movs	r1, #0
 80052f2:	4628      	mov	r0, r5
 80052f4:	f7fa ff8c 	bl	8000210 <memchr>
 80052f8:	b108      	cbz	r0, 80052fe <_printf_i+0x1ea>
 80052fa:	1b40      	subs	r0, r0, r5
 80052fc:	6060      	str	r0, [r4, #4]
 80052fe:	6863      	ldr	r3, [r4, #4]
 8005300:	6123      	str	r3, [r4, #16]
 8005302:	2300      	movs	r3, #0
 8005304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005308:	e7aa      	b.n	8005260 <_printf_i+0x14c>
 800530a:	6923      	ldr	r3, [r4, #16]
 800530c:	462a      	mov	r2, r5
 800530e:	4649      	mov	r1, r9
 8005310:	4640      	mov	r0, r8
 8005312:	47d0      	blx	sl
 8005314:	3001      	adds	r0, #1
 8005316:	d0ad      	beq.n	8005274 <_printf_i+0x160>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	079b      	lsls	r3, r3, #30
 800531c:	d413      	bmi.n	8005346 <_printf_i+0x232>
 800531e:	68e0      	ldr	r0, [r4, #12]
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	4298      	cmp	r0, r3
 8005324:	bfb8      	it	lt
 8005326:	4618      	movlt	r0, r3
 8005328:	e7a6      	b.n	8005278 <_printf_i+0x164>
 800532a:	2301      	movs	r3, #1
 800532c:	4632      	mov	r2, r6
 800532e:	4649      	mov	r1, r9
 8005330:	4640      	mov	r0, r8
 8005332:	47d0      	blx	sl
 8005334:	3001      	adds	r0, #1
 8005336:	d09d      	beq.n	8005274 <_printf_i+0x160>
 8005338:	3501      	adds	r5, #1
 800533a:	68e3      	ldr	r3, [r4, #12]
 800533c:	9903      	ldr	r1, [sp, #12]
 800533e:	1a5b      	subs	r3, r3, r1
 8005340:	42ab      	cmp	r3, r5
 8005342:	dcf2      	bgt.n	800532a <_printf_i+0x216>
 8005344:	e7eb      	b.n	800531e <_printf_i+0x20a>
 8005346:	2500      	movs	r5, #0
 8005348:	f104 0619 	add.w	r6, r4, #25
 800534c:	e7f5      	b.n	800533a <_printf_i+0x226>
 800534e:	bf00      	nop
 8005350:	08005549 	.word	0x08005549
 8005354:	0800555a 	.word	0x0800555a

08005358 <__malloc_lock>:
 8005358:	4801      	ldr	r0, [pc, #4]	; (8005360 <__malloc_lock+0x8>)
 800535a:	f7ff bc65 	b.w	8004c28 <__retarget_lock_acquire_recursive>
 800535e:	bf00      	nop
 8005360:	20004398 	.word	0x20004398

08005364 <__malloc_unlock>:
 8005364:	4801      	ldr	r0, [pc, #4]	; (800536c <__malloc_unlock+0x8>)
 8005366:	f7ff bc60 	b.w	8004c2a <__retarget_lock_release_recursive>
 800536a:	bf00      	nop
 800536c:	20004398 	.word	0x20004398

08005370 <_realloc_r>:
 8005370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005374:	4680      	mov	r8, r0
 8005376:	4614      	mov	r4, r2
 8005378:	460e      	mov	r6, r1
 800537a:	b921      	cbnz	r1, 8005386 <_realloc_r+0x16>
 800537c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005380:	4611      	mov	r1, r2
 8005382:	f7ff bdd9 	b.w	8004f38 <_malloc_r>
 8005386:	b92a      	cbnz	r2, 8005394 <_realloc_r+0x24>
 8005388:	f000 f84c 	bl	8005424 <_free_r>
 800538c:	4625      	mov	r5, r4
 800538e:	4628      	mov	r0, r5
 8005390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005394:	f000 f892 	bl	80054bc <_malloc_usable_size_r>
 8005398:	4284      	cmp	r4, r0
 800539a:	4607      	mov	r7, r0
 800539c:	d802      	bhi.n	80053a4 <_realloc_r+0x34>
 800539e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053a2:	d812      	bhi.n	80053ca <_realloc_r+0x5a>
 80053a4:	4621      	mov	r1, r4
 80053a6:	4640      	mov	r0, r8
 80053a8:	f7ff fdc6 	bl	8004f38 <_malloc_r>
 80053ac:	4605      	mov	r5, r0
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d0ed      	beq.n	800538e <_realloc_r+0x1e>
 80053b2:	42bc      	cmp	r4, r7
 80053b4:	4622      	mov	r2, r4
 80053b6:	4631      	mov	r1, r6
 80053b8:	bf28      	it	cs
 80053ba:	463a      	movcs	r2, r7
 80053bc:	f7ff fc36 	bl	8004c2c <memcpy>
 80053c0:	4631      	mov	r1, r6
 80053c2:	4640      	mov	r0, r8
 80053c4:	f000 f82e 	bl	8005424 <_free_r>
 80053c8:	e7e1      	b.n	800538e <_realloc_r+0x1e>
 80053ca:	4635      	mov	r5, r6
 80053cc:	e7df      	b.n	800538e <_realloc_r+0x1e>

080053ce <memmove>:
 80053ce:	4288      	cmp	r0, r1
 80053d0:	b510      	push	{r4, lr}
 80053d2:	eb01 0402 	add.w	r4, r1, r2
 80053d6:	d902      	bls.n	80053de <memmove+0x10>
 80053d8:	4284      	cmp	r4, r0
 80053da:	4623      	mov	r3, r4
 80053dc:	d807      	bhi.n	80053ee <memmove+0x20>
 80053de:	1e43      	subs	r3, r0, #1
 80053e0:	42a1      	cmp	r1, r4
 80053e2:	d008      	beq.n	80053f6 <memmove+0x28>
 80053e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053ec:	e7f8      	b.n	80053e0 <memmove+0x12>
 80053ee:	4402      	add	r2, r0
 80053f0:	4601      	mov	r1, r0
 80053f2:	428a      	cmp	r2, r1
 80053f4:	d100      	bne.n	80053f8 <memmove+0x2a>
 80053f6:	bd10      	pop	{r4, pc}
 80053f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005400:	e7f7      	b.n	80053f2 <memmove+0x24>
	...

08005404 <_sbrk_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d06      	ldr	r5, [pc, #24]	; (8005420 <_sbrk_r+0x1c>)
 8005408:	2300      	movs	r3, #0
 800540a:	4604      	mov	r4, r0
 800540c:	4608      	mov	r0, r1
 800540e:	602b      	str	r3, [r5, #0]
 8005410:	f7fb fb52 	bl	8000ab8 <_sbrk>
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d102      	bne.n	800541e <_sbrk_r+0x1a>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	b103      	cbz	r3, 800541e <_sbrk_r+0x1a>
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	bd38      	pop	{r3, r4, r5, pc}
 8005420:	200043a4 	.word	0x200043a4

08005424 <_free_r>:
 8005424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005426:	2900      	cmp	r1, #0
 8005428:	d044      	beq.n	80054b4 <_free_r+0x90>
 800542a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800542e:	9001      	str	r0, [sp, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	f1a1 0404 	sub.w	r4, r1, #4
 8005436:	bfb8      	it	lt
 8005438:	18e4      	addlt	r4, r4, r3
 800543a:	f7ff ff8d 	bl	8005358 <__malloc_lock>
 800543e:	4a1e      	ldr	r2, [pc, #120]	; (80054b8 <_free_r+0x94>)
 8005440:	9801      	ldr	r0, [sp, #4]
 8005442:	6813      	ldr	r3, [r2, #0]
 8005444:	b933      	cbnz	r3, 8005454 <_free_r+0x30>
 8005446:	6063      	str	r3, [r4, #4]
 8005448:	6014      	str	r4, [r2, #0]
 800544a:	b003      	add	sp, #12
 800544c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005450:	f7ff bf88 	b.w	8005364 <__malloc_unlock>
 8005454:	42a3      	cmp	r3, r4
 8005456:	d908      	bls.n	800546a <_free_r+0x46>
 8005458:	6825      	ldr	r5, [r4, #0]
 800545a:	1961      	adds	r1, r4, r5
 800545c:	428b      	cmp	r3, r1
 800545e:	bf01      	itttt	eq
 8005460:	6819      	ldreq	r1, [r3, #0]
 8005462:	685b      	ldreq	r3, [r3, #4]
 8005464:	1949      	addeq	r1, r1, r5
 8005466:	6021      	streq	r1, [r4, #0]
 8005468:	e7ed      	b.n	8005446 <_free_r+0x22>
 800546a:	461a      	mov	r2, r3
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	b10b      	cbz	r3, 8005474 <_free_r+0x50>
 8005470:	42a3      	cmp	r3, r4
 8005472:	d9fa      	bls.n	800546a <_free_r+0x46>
 8005474:	6811      	ldr	r1, [r2, #0]
 8005476:	1855      	adds	r5, r2, r1
 8005478:	42a5      	cmp	r5, r4
 800547a:	d10b      	bne.n	8005494 <_free_r+0x70>
 800547c:	6824      	ldr	r4, [r4, #0]
 800547e:	4421      	add	r1, r4
 8005480:	1854      	adds	r4, r2, r1
 8005482:	42a3      	cmp	r3, r4
 8005484:	6011      	str	r1, [r2, #0]
 8005486:	d1e0      	bne.n	800544a <_free_r+0x26>
 8005488:	681c      	ldr	r4, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	6053      	str	r3, [r2, #4]
 800548e:	440c      	add	r4, r1
 8005490:	6014      	str	r4, [r2, #0]
 8005492:	e7da      	b.n	800544a <_free_r+0x26>
 8005494:	d902      	bls.n	800549c <_free_r+0x78>
 8005496:	230c      	movs	r3, #12
 8005498:	6003      	str	r3, [r0, #0]
 800549a:	e7d6      	b.n	800544a <_free_r+0x26>
 800549c:	6825      	ldr	r5, [r4, #0]
 800549e:	1961      	adds	r1, r4, r5
 80054a0:	428b      	cmp	r3, r1
 80054a2:	bf04      	itt	eq
 80054a4:	6819      	ldreq	r1, [r3, #0]
 80054a6:	685b      	ldreq	r3, [r3, #4]
 80054a8:	6063      	str	r3, [r4, #4]
 80054aa:	bf04      	itt	eq
 80054ac:	1949      	addeq	r1, r1, r5
 80054ae:	6021      	streq	r1, [r4, #0]
 80054b0:	6054      	str	r4, [r2, #4]
 80054b2:	e7ca      	b.n	800544a <_free_r+0x26>
 80054b4:	b003      	add	sp, #12
 80054b6:	bd30      	pop	{r4, r5, pc}
 80054b8:	2000439c 	.word	0x2000439c

080054bc <_malloc_usable_size_r>:
 80054bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054c0:	1f18      	subs	r0, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bfbc      	itt	lt
 80054c6:	580b      	ldrlt	r3, [r1, r0]
 80054c8:	18c0      	addlt	r0, r0, r3
 80054ca:	4770      	bx	lr

080054cc <_init>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	bf00      	nop
 80054d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d2:	bc08      	pop	{r3}
 80054d4:	469e      	mov	lr, r3
 80054d6:	4770      	bx	lr

080054d8 <_fini>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	bf00      	nop
 80054dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054de:	bc08      	pop	{r3}
 80054e0:	469e      	mov	lr, r3
 80054e2:	4770      	bx	lr
